openapi: 3.0.2
info:
  description: |
    # Basic concepts

    ## Versioning
    ### Definition
    Smarp supports a multi-version API, which means that multiple versions of our API could be available at the same time for API users.

    Versions are formated as  `v1`, `v2`, ... `vN`.

    #### Breaking changes
    Each new Major version contains at least one breaking change compared to the previous version,
    therefore no backward compatibility is guaranteed and adopting a new Major version will require developers’ adjustments to the breaking changes.

    ##### Breaking changes include:
    - Endpoints are removed or renamed
    - Parameters are removed, renamed or introduce a type change
    - New rules for request parameters are introduced. For example, when a parameter becomes mandatory
    - New rules for response parameters are introduced. For example, when a response parameter is omitted when empty, null or 0
    - Response codes are changed or removed

    #### Non-Breaking changes
    Non-breaking changes of API can be applied by Smarp at any time to existing versions.
    Please take this into consideration and refer to our latest documentation when implementing an application that uses Smarp’s API.

    ##### Non-breaking changes include:
    - New endpoints are added
    - New non-mandatory request parameters are added
    - New response parameters are added
    - Bug fixes

    #### Available versions
      List of avaialble versions:
      - [v1](  https://smarp.github.io/v1/)

    #### Example
    Accessing v1 endpoint
    ```
    https://smarp.smarpshare.com/api/v1/ping
    ```

    ## Authentication
    ### Create access token
    To get an access token, please check if you have `Channel manager`, `Group Admin` or `Company Admin` role (Check your current role by clicking your avatar on the top right-hand corner of the page. Your role is displayed under your name)

    - Access your company domain settings using the following URL `https://{subdomain}.smarpshare.com/#/profile/settings`
    - Navigate to `Access token` tab on the left-side menu.
    > If you are `Channel manager`, `Group Admin` or `Company Admin` role but cannot see Access token tab, please contact our support team to enable Access token feature.
    - If you don't have an access token, please create one by pressing `Create new access token` button. Then give the name for the token that is easier for you to remember.

    ### Using access token
    - If you already have an access token, press the button with copy icon (next to the token string).
    - To use an access token, you must put it to HTTP request header `Authorization`. Here is cURL example
    ```
    curl --request GET -H "Authorization: Bearer <your-access-token>" https://{subdomain}.smarpshare.com/api/{version}/allowed-access-token-api
    ```
    - Any API having `access-token` as `Authorizations` option in this documentation is potentially usable with access token, depending on whether you have the requiste user role permission.

    ## Requests and responses
    ### Pagination

    Some of the HTTP GET endpoints returns only portion of the requested data per request.

    Maximum amount of items returned per request is 1000.

    In order to iterate throughout other items use `next` parameter. The value of `next` could be obtained in the result of request.

    #### Example
    Accessing [GET posts](#tag/posts) v1 endpoint.

    First request
    ```
    https://smarp.smarpshare.com/api/v1/posts
    ```
    In the response there are 1000 items and link to the reference to the next request in `meta.next`

    ```
    {
      "meta": {
        "next": "510000000000000000000000"  <---- reference to the next request
      },
      "data": [
        {
          "id": "500000000000000000000000",
          "publishedAt": "2012-07-13T11:01:20Z",
          "title": "Post title N 1",
          "url": "https://someurl1",
          "type": "link"
        },
        ...
        {
          "id": "510000000000000000000000",
          "publishedAt": "2013-01-23T15:21:36Z",
          "title": "Post title N 1000",
          "url": "https://someurl1000",
          "type": "link"
        }
      ]
    }
    ```
    In order to get another batch of results send same `HTTP GET` request with `next` parameter.
    The value of `next` is taken from the results of the previous request.

    Second request

    ```
      https://smarp.smarpshare.com/api/v1/posts?next=510000000000000000000000
    ```

    In the response there is no `meta.next` value.

    It means that there is no more items to fetch, therefore there is no need to make any more calls.

       ```
       {
         "meta": {},
         "data": [
           {
             "id": "550000000000000000000000",
             "publishedAt": "2015-03-11T08:42:40Z",
             "title": "Post title N 1001",
             "url": "https://someurl1001",
             "type": "link"
           }
         ]
       }
       ```
    ## Anonymity
    Some of the endpoints contain User ID or equivalent field in their reponses.

    However, certain records in the responses may omit User ID or equivalent for users who are anonymous on Smarp.

    ### When a user is considered anonymous
    - A user has chosen to be anonymous in his/her personal settings
    - A user belongs to a Group that is set to protect its Users from being identified in analytics due to compliance reasons.

    ### Example
    ```json
      // UserId is in the response because the user is not anonymised
      {
        "UserId": "393c69300000000000000000",
        "PostId": "263c69300000000000000000"
      }

      // UserId is not in the response because the user is anonymised
      {
        "PostId": "493c69300000000000000000"
      }

    ```

    ## Limits and quotas

    ### Definition

    Smarp has the limits and quotas of requesting the APIs. These limits help Smarp provide a reliable and fast API to everyone. We put limits and quotas on API requests to protect the system from receiving more data than it can handle.

    **NOTE: _The limits and quotas are subject to change._**

    Each of the different types of rate limits has a specific duration. We start calculating the time after the first call, and at the end of that duration, we reset quotas.

    ### Current limits and quotas

    | Time period | Maximun request count | Quotas condition        |
    | ----------- | --------------------- | ----------------------- |
    | 10 minutes  | 100                   | per endpoint, per token |
    | 24 hours    | 1000                  | per token               |

    ### Example

    For example, if we have that two limits:
    100 requests per 10 minutes per endpoint per token and 1000 requests per 24 hours per token:

    1) We can send 100 requests to 10 different endpoints per day for a single token (100 request  * 10 endpoints = 1000 requests in total). If we do that in 1 hour, it means we should wait for 23 hours to reset quotas or use another token

    2) We can send 100 requests to 1 endpoint per 10 minutes. If we do that in 1 minute, it means we should wait for 9 minutes to reset quotas or use another token

    3) We can send 100 requests to 1 endpoint and 100 requests to the same endpoint per 10 minutes with a different token.
  title: Smarp API Reference
  contact:
    name: Tech Support
    url: 'https://smarp.com/company/#contact-us'
    email: support@smarp.com
  x-logo:
    url: ./img/smarp-logo.png
servers:
  - url: 'https://{subdomain}.smarpshare.com/api/v1'
    description: Base domain for API V1
    variables:
      subdomain:
        default: login
        description: this value is assigned by the service provider
tags:
  - name: Clicks
    description: Clicks endpoints
  - name: Campaigns
    description: Campaigns endpoints
  - name: Groups
    description: Groups endpoints
  - name: Ping
    description: Check API availability
  - name: Posts
    description: Posts endpoints
  - name: Shares
    description: Shares endpoints
  - name: Teams
    description: Teams endpoints
  - name: Users
    description: Users endpoints
  - name: Channels
    description: Channels endpoints
  - name: User Management
    description: 'Smarp''s user management implementation of SCIM follows strictly, but not all, the SCIM 2 specifications published under the [IETF](https://tools.ietf.org/wg/scim/). This document provides general information about the scope of SCIM implementation within Smarp application. The full documentation can be found on [SCIM website](http://www.simplecloud.info).'
  - name: Hooks
    description: |
      ## Hooks payload
      Each of events have specific count of fields, what server send to given target url.

      #### Payload of `post_published` event
      That event will generate a json and send to target URL with next fields:

      | name        | type   | description                                                  |
      | ----------- | ------ | ------------------------------------------------------------ |
      | postId      | string | ID of post (which can be used to build a preview URL: {instance}.smarpshare.com/#/previews/{postId} that directs users to a post on Smarp) |
      | postTitle   | string | Title of post                                                |
      | channelId   | string | ID of channel (which can be used to build a feed URL: {instance}.smarpshare.com/#/?type=published&channelId={channelId} that directs users to a channel on Smarp) |
      | channelName | string | Name of channel |

      For example:
      ```
        {
          "postId": "000011112222333344445550",
          "postTitle": "post title",
          "channelId": "000011112222333344445551",
          "channelTitle": "channel name"
        }
      ```
paths:
  /clicks:
    get:
      tags:
        - Clicks
      summary: Returns clicks generated from the posts shared by users to social media
      description: |
        Returns all clicks based on the period in which clicks happened.

        This Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`

        #### Anonymity

        This endpoint supports user (sharerId) [Anonymity](#section/Basic-concepts/Anonymity)
      security:
        - access-token: []
      parameters:
        - name: from
          in: query
          description: Clicks that happened after this time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Clicks that happened at or before that time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of clicks.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetClicksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: Returns campaigns for specific company
      description: |
        Returns all campaigns.

        This Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`

        #### Anonymity

        This endpoint supports user (sharerId) [Anonymity](#section/Basic-concepts/Anonymity)
      security:
        - access-token: []
      parameters:
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of campaigns.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetCampaignsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /groups:
    get:
      tags:
        - Groups
      summary: Returns groups
      description: |
        Returns all groups within instance
      security:
        - access-token: []
      responses:
        '200':
          description: A list of groups.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetGroupsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /ping:
    get:
      tags:
        - Ping
      summary: Check API availability
      description: Endpoint for check availability of server
      responses:
        '200':
          description: Contains PONG response.
          content:
            text/plain:
              schema:
                type: string
  /posts:
    get:
      tags:
        - Posts
      summary: Returns posts
      description: |
        Returns posts based on the period in which posts were published. Other criteria:

        - Posts that have been deleted will not be returned.
        - Posts that were published in private channels will not be returned.

        Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`
      security:
        - access-token: []
      parameters:
        - name: from
          in: query
          description: Posts that were published after this time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Posts that were published at or before that time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          required: false
          description: Link to the next batch of results.
          schema:
            type: string
      responses:
        '200':
          description: A list of posts.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetPostsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
    post:
      tags:
        - Posts
      summary: Create a new post
      description: |
        Create a new post with the data provided. Currently supporting 2 post types: Link and Article.
        Upon successful creation, the new post is returned.

        Role level required: `Company Admin`
      security:
        - access-token: []
      requestBody:
        description: Data for the new post.
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/PostCreateRequest'
      responses:
        '200':
          description: The post which has been created.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/PostCreateResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /shares:
    get:
      tags:
        - Shares
      summary: Returns shares
      description: |
        Returns all shared shares based on the period in which share was done.

        This Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`

        #### Anonymity

        This endpoint supports user (sharerId) [Anonymity](#section/Basic-concepts/Anonymity)
      security:
        - access-token: []
      parameters:
        - name: from
          in: query
          description: Shares that created after this time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Shares that created at or before that time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of shares.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetSharesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /users:
    get:
      tags:
        - Users
      summary: Returns users in the company
      description: |
        Returns users.

        This endpoint is a subject of
        [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`
      security:
        - access-token: []
      parameters:
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetUsersResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /teams:
    get:
      tags:
        - Teams
      summary: Returns teams
      description: |
        Returns all teams in the instance.

        This Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`
      security:
        - access-token: []
      parameters:
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetTeamsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /channels:
    get:
      tags:
        - Channels
      summary: Returns channels
      description: |
        Returns all channels within instance
      security:
        - access-token: []
      parameters:
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of channels.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetChannelsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /reads:
    get:
      tags:
        - Reads
      summary: Returns post reads generated from the posts
      description: |
        Returns all post reads based on the period in which reads happened.

        This Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)

        Role level required: `Company Admin`
      security:
        - access-token: []
      parameters:
        - name: from
          in: query
          description: Reads that happened after this time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: Reads that happened at or before that time will be returned. Date-time should be in RFC3339 format.
          required: false
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          required: false
          description: Link to the next batch of results
          schema:
            type: string
      responses:
        '200':
          description: A list of reads.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetClicksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  /scim/v2/users:
    servers:
      - url: 'https://{subdomain}.smarpshare.com/api/'
        description: Base domain for User management API
        variables:
          subdomain:
            default: login
            description: this value is assigned by the service provider
    get:
      tags:
        - User Management
      summary: Retrieve users in the company
      description: |
        Return either a user matched by the optional filter or an empty list. It is recommended to call this endpoint without a filter to test the integration connection.
      security:
        - access-token: []
      parameters:
        - name: filter
          in: query
          description: 'A formatted filter. It must have a form of: `userName eq userPrincipleName`, where "userPrincipleName" represents the user email address.'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A ListResponse (following SCIM schema). It is returned even if no user has been found matching the filter.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SCIMListResponse'
        '403':
          description: Unauthorized request
        '439':
          description: Quota of API requests was reached.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
    post:
      tags:
        - User Management
      summary: Create a new user
      description: |
        Create a user based on request. It returns Smarp Id of the new user. This id should be saved and used in subsequent requests for the user.
      security:
        - access-token: []
      requestBody:
        description: Data about the new user
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SCIMUser'
      responses:
        '200':
          description: The user which has been created.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SCIMUser'
        '400':
          description: A bad request. The request schema is malformed.
        '403':
          description: Unauthorized request
        '409':
          description: Resource conflict. A user with the same email already exists.
        '439':
          description: Quota of API requests was reached.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
  '/scim/v2/users/{userId}':
    servers:
      - url: 'https://{subdomain}.smarpshare.com/api/'
        description: Base domain for User management API
        variables:
          subdomain:
            default: login
            description: this value is assigned by the service provider
    get:
      tags:
        - User Management
      summary: Retrieve a user by Smarp Id
      description: |
        Return a user matching the Smarp user Id.
      security:
        - access-token: []
      parameters:
        - name: userId
          in: path
          description: Smarp Id of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user has been found.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SCIMUser'
        '400':
          description: A bad request. The UserId might be invalid.
        '403':
          description: Unauthorized request
        '404':
          description: User not found
        '439':
          description: Quota of API requests was reached.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
    delete:
      tags:
        - User Management
      summary: Delete a user by Smarp Id
      description: |
        Delete the user matching UserId.
      security:
        - access-token: []
      parameters:
        - name: userId
          in: path
          description: Smarp Id of the user
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The user has been deleted.
        '400':
          description: A bad request. The UserId might be invalid.
        '403':
          description: Unauthorized request
        '404':
          description: User not found
        '439':
          description: Quota of API requests was reached.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
    put:
      tags:
        - User Management
      summary: Update a user
      description: |
        Replace the user matching UserId with new data. It returns the user with new data. The UserId stays unchanged.
      security:
        - access-token: []
      parameters:
        - name: userId
          in: path
          description: Smarp Id of the user
          required: true
          schema:
            type: string
      requestBody:
        description: New data about the user
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SCIMUser'
      responses:
        '204':
          description: The user has been deleted.
        '400':
          description: A bad request. The UserId might be invalid.
        '403':
          description: Unauthorized request
        '404':
          description: User not found
        '439':
          description: Quota of API requests was reached.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
    patch:
      tags:
        - User Management
      summary: Update a user
      description: |
        Update the user matching UserId with new data. Only data present in the request will be updated.
      security:
        - access-token: []
      parameters:
        - name: userId
          in: path
          description: Smarp Id of the user
          required: true
          schema:
            type: string
      requestBody:
        description: New data about the user
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SCIMUserPatch'
      responses:
        '204':
          description: The user has been updated.
        '400':
          description: A bad request. The UserId might be invalid or Operation is invalid.
        '403':
          description: Unauthorized request
        '404':
          description: User not found
        '439':
          description: Quota of API requests was reached.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
  /hooks:
    get:
      tags:
        - Hooks
      summary: Return all user`s hooks
      description: |
        Returns all hooks of user.
      security:
        - access-token: []
      responses:
        '200':
          description: A list of hooks.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GetHooksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
    post:
      tags:
        - Hooks
      summary: Create a new hook
      description: |
        That endpoint can be used to create a new subscription for a given event type

        Role level required: `Company Admin`
      security:
        - access-token: []
      requestBody:
        description: 'Expect to receive object with targetURL, event type and related additional data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HookSubscribeRequest'
      responses:
        '200':
          description: Hook was created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/CreateHooksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
  '/hooks/{hookId}':
    delete:
      tags:
        - Hooks
      summary: Remove a hook
      description: |
        Remove a hook by subscription ID
      security:
        - access-token: []
      parameters:
        - name: hookId
          in: path
          description: Id of the hook to be removed
          required: true
          schema:
            $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          description: Empty response.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RemoveHooksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '403':
          description: Unauthorized request
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '439':
          description: Quota of API requests was reached
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ErrorEnvelope'
components:
  schemas:
    GroupItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the group
        name:
          type: string
          description: Name of the group
      required:
        - id
        - name
    GetGroupsResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          type: array
          items:
            $ref: '#/components/schemas/GroupItem'
      required:
        - data
    ClickItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the click
        createdAt:
          type: string
          format: date-time
          description: Time when the click happened
        sharerId:
          type: string
          description: Id of the user that shared a post which generated the click
        postId:
          type: string
          description: Id of the post that generated the click
        socialNetwork:
          description: Name of the social network where the click happened
          type: string
      required:
        - id
        - createdAt
        - postId
        - socialNetwork
    GetClicksResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/ClickItem'
      required:
        - meta
        - data
    CampaignItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the campaign
        name:
          type: string
          description: Campaign name
      required:
        - id
        - name
    GetCampaignsResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/CampaignItem'
      required:
        - meta
        - data
    PostChannel:
      type: object
      properties:
        id:
          type: string
          description: Id of the channel
        publishedAt:
          type: string
          format: date-time
          description: Time when the channel was published
        archivedAt:
          type: string
          format: date-time
          description: Time when the channel was archived
    PostItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the post
        publishedAt:
          type: string
          format: date-time
          description: Time when the post was published
        title:
          type: string
          description: Title of the post
        url:
          type: string
          description: URL of the post if the post is a Link-type post
        type:
          description: Type of the post
          enum:
            - article
            - link
            - image
            - video
          type: string
        channels:
          description: The list of channels that a post is associated with
          type: array
          items:
            $ref: '#/components/schemas/PostChannel'
        campaignId:
          description: Id of the campaign
          type: string
      required:
        - id
        - publishedAt
        - title
        - url
        - type
        - channels
        - campaignId
    GetPostsResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostItem'
      required:
        - meta
        - data
    PostCreateRequest:
      type: object
      properties:
        url:
          description: 'Source URL of the post, which users will land on if they choose to view the original source. Required for Link-type posts. Must be left empty for Article-type posts.'
          type: string
        title:
          description: Title of the post. Required for Article-type posts.
          type: string
        body:
          description: Body text of the post.
          type: string
        imageUrlList:
          description: Image URL of the post. Only the first URL is used currently for Link- and Article-type posts.
          type: string
        isShareable:
          description: whether the post can be shared by users to social media.
          type: boolean
        isPublished:
          description: 'whether the post is set to be published or proposed. If TRUE, the post will be published right away and archived after a duration according to Company Settings. If FALSE, the post will be proposed for approval.'
          type: boolean
        channelList:
          description: List of channel Ids where the post will be created in.
          type: string
        type:
          description: 'Type of the post, indicating whether the post will be a Link- or Article-type post.'
          type: string
          enum:
            - article
            - link
    PostCreateResponse:
      type: object
      properties:
        id:
          description: Id of the post.
          type: string
        postPreviewUrl:
          description: Link to open the post on Smarp.
          type: string
        imageUrl:
          description: Image URL of the post if available.
          type: string
        title:
          description: Title of the post.
          type: string
        body:
          description: Body text of the post.
          type: string
        author:
          description: Name of the user who authorized the request.
          type: string
        authorAvatar:
          description: Avatar image URL of the user who authorized the request.
          type: string
        language:
          description: Language of the post (detected by Smarp).
          type: string
    ShareItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the share
        sharedAt:
          type: string
          format: date-time
          description: Time when the share happened
        sharerId:
          type: string
          description: Id of the user that shared a post which generated the share
        postId:
          type: string
          description: Id of the post that generated the share
        socialNetwork:
          description: Name of the social network where the share happened
          type: string
        uniqueClickCount:
          description: Total number of uniques clicks on social media
          type: integer
        likeCount:
          description: Total number of likes on social media
          type: integer
        commentCount:
          description: Total number of comments on social media
          type: integer
        reshareCount:
          description: Total number of re-shares on social media
          type: integer
      required:
        - id
        - sharedAt
        - postId
        - socialNetwork
        - uniqueClickCount
        - likeCount
        - commentCount
        - reshareCount
    GetSharesResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/ShareItem'
      required:
        - meta
        - data
    UserChannel:
      type: object
      properties:
        id:
          type: string
          description: Id of the channel
    UserItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the user
        firstName:
          type: string
          description: first name
        lastName:
          type: string
          description: last name
        email:
          type: string
          description: email
        phoneNumber:
          type: string
          description: phone number
        groupId:
          type: string
          description: Id of the group that the user belongs to
        teamIds:
          type: array
          items:
            type: string
          description: Id of the teams that the user belongs to
        channels:
          description: The list of channels that the user subscribes to
          type: array
          items:
            $ref: '#/components/schemas/UserChannel'
        countConnections:
          description: User reach per social network
          type: object
          properties:
            linkedin:
              type: number
              description: Count of connections in linkedin
            twitter:
              type: number
              description: Count of connections in twitter
      required:
        - id
        - firstName
        - lastName
        - groupId
        - teamIds
        - channels
    GetUsersResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserItem'
      required:
        - meta
        - data
    TeamItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the team
        name:
          type: string
          description: Name of the team
        groupId:
          type: string
          description: ID of the Group that the team belongs to
      required:
        - id
        - name
        - groupId
    GetTeamsResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/TeamItem'
      required:
        - meta
        - data
    ErrorEnvelope:
      type: object
      properties:
        meta:
          type: object
        data:
          type: object
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Status code
            message:
              type: string
              description: Error message
      required:
        - error
    ChannelItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the channel
        name:
          type: string
          description: Name of the channel
        groupId:
          type: string
          description: Id of the group that channel belong to
        archivedAt:
          type: string
          format: date-time
          description: Time when the channel was archived
      required:
        - id
        - name
        - groupId
    GetChannelsResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChannelItem'
      required:
        - meta
        - data
    PostReadItem:
      type: object
      properties:
        id:
          type: string
          description: Id of the click
        postId:
          type: string
          description: Id of the post that generated the read
        userId:
          type: string
          description: Id of the user that read a post
        platform:
          description: Name of the platform where the read happened
          type: string
        readAt:
          type: string
          format: date-time
          description: Time when the post was read
      required:
        - id
        - postId
        - userId
        - platform
        - readAt
    GetPostReadsResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/PostReadItem'
      required:
        - meta
        - data
    SCIMListResponse:
      type: object
      properties:
        schemas:
          description: 'Namespaces of the SCIM schemas present in the current structure. It must contain "urn:ietf:params:scim:schemas:core:2.0:ListResponse"'
          type: array
          items:
            type: string
        totalResults:
          description: 'The total number of users found based on applied filter, as indicated in the Resources.'
          type: integer
        startIndex:
          description: The starting index of the Resources.
          type: integer
        itemsPerPage:
          description: The number of users returned in this response.
          type: integer
        Resources:
          description: The users representation.
          type: array
          items:
            $ref: '#/components/schemas/SCIMUser'
    SCIMUser:
      type: object
      properties:
        schemas:
          description: 'Namespaces of the SCIM schemas present in the current structure. It must contain "urn:ietf:params:scim:schemas:core:2.0:User"'
          type: array
          items:
            type: string
        id:
          description: Smarp Id of the user. It should be stored on the client and is used in subsequent requests.
          type: string
        active:
          description: State of the user on the client.
          type: boolean
        userName:
          description: 'UserName of the user, in the form of an email address.'
          type: string
        name:
          description: 'Name of the user, including family name and given name'
          type: object
          properties:
            familyName:
              type: string
            givenName:
              type: string
        addresses:
          description: List of addresses of the user. Only 'work' address is read. Only 1 'work' address is read.
          type: array
          items:
            type: object
            properties:
              primary:
                description: 'Indicating the address to be used, when "primary" is ''true''. Only 1 "primary" address is read.'
                type: boolean
              type:
                description: 'Type of the address. Only 1 ''work'' address is read. When both "type" and "primary" present, "primary" is favoured.'
                type: string
                enum:
                  - home
                  - work
              country:
                description: Its value is used to assign a user to a Smarp Group.
                type: string
              locality:
                description: Its value is used to assign a user to a Smarp Team.
                type: string
              region:
                description: Its value is used to assign a user to a Smarp Team.
                type: string
        'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:organization':
          description: Its value is used to assign a user to a Smarp Team.
          type: string
        'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:division':
          description: Its value is used to assign a user to a Smarp Team.
          type: string
        'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department':
          description: Its value is used to assign a user to a Smarp Team.
          type: string
    SCIMUserPatch:
      type: object
      properties:
        schemas:
          description: 'Namespaces of the SCIM schemas present in the current structure. It must contain "urn:ietf:params:scim:api:messages:2.0:PatchOp"'
          type: array
          items:
            type: string
        Operations:
          description: 'Each item should contain a field to be updated, its new value and the operation. There must be at least 1 item.'
          type: array
          items:
            type: object
            properties:
              op:
                descrition: The operation to be executed.
                type: string
                enum:
                  - add
                  - remove
                  - replace
              path:
                description: |
                  The attribute path describing the target of the operation. Valid examples of "path" are as follow:
                    - "path":"active"
                    - "path":"name.familyName"
                    - "path":"addresses[type eq \"work\"].country"
                type: string
              value:
                description: The value to be added or replacing.
                type: string
    HookSubscribeRequest:
      type: object
      required:
        - TargetURL
        - Type
      properties:
        targetUrl:
          type: string
          description: Target URL to receive subscribed data (Target URL must be https)
        type:
          $ref: '#/components/schemas/HookType'
          description: Type of subscription
        channelId:
          $ref: '#/components/schemas/ObjectId'
          description: Id of the Smarp channel that a subscription is corresponding to. Smarp will send events whenever there is a new post published in the channel
    SubscriptionPayload:
      type: object
      required:
        - id
        - type
        - createdAt
        - targetUrl
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
          description: Id of the subscription
        type:
          $ref: '#/components/schemas/HookType'
          description: Type of subscription
        createdAt:
          type: string
          format: date-time
          description: Time when the subscription was created
        channelId:
          $ref: '#/components/schemas/ObjectId'
          description: ID of the Channel to unsubscribe from
        targetUrl:
          type: string
          description: Target URL to receive updates
    GetHooksResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionPayload'
      required:
        - meta
        - data
    CreateHooksResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: object
          $ref: '#/components/schemas/SubscriptionPayload'
      required:
        - meta
        - data
    RemoveHooksResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            next:
              type: string
              description: Link to the next batch of results. Empty in case no more results could be fetched
        data:
          type: object
      required:
        - meta
        - data
    ObjectId:
      type: string
      pattern: '^[0-9a-fA-F]{24}$'
    HookType:
      type: string
      enum:
        - post_published
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
