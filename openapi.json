{
  "openapi": "3.0.2",
  "info": {
    "description": "# Basic concepts\n\n## Versioning\n### Definition\nSmarp supports a multi-version API, which means that multiple versions of our API could be available at the same time for API users.\n\nVersions are formated as  `v1`, `v2`, ... `vN`.\n\n#### Breaking changes\nEach new Major version contains at least one breaking change compared to the previous version,\ntherefore no backward compatibility is guaranteed and adopting a new Major version will require developers’ adjustments to the breaking changes.\n\n##### Breaking changes include:\n- Endpoints are removed or renamed\n- Parameters are removed, renamed or introduce a type change\n- New rules for request parameters are introduced. For example, when a parameter becomes mandatory\n- New rules for response parameters are introduced. For example, when a response parameter is omitted when empty, null or 0\n- Response codes are changed or removed\n\n#### Non-Breaking changes\nNon-breaking changes of API can be applied by Smarp at any time to existing versions.\nPlease take this into consideration and refer to our latest documentation when implementing an application that uses Smarp’s API.\n\n##### Non-breaking changes include:\n- New endpoints are added\n- New non-mandatory request parameters are added\n- New response parameters are added\n- Bug fixes\n\n#### Available versions\n  List of avaialble versions:\n  - [v1](  https://smarp.github.io/v1/)\n\n#### Example\nAccessing v1 endpoint\n```\nhttps://smarp.smarpshare.com/api/v1/ping\n```\n\n## Authentication\n### Create access token\nTo get an access token, please check if you have `Channel manager`, `Group Admin` or `Company Admin` role (Check your current role by clicking your avatar on the top right-hand corner of the page. Your role is displayed under your name)\n\n- Access your company domain settings using the following URL `https://{subdomain}.smarpshare.com/#/profile/settings`\n- Navigate to `Access token` tab on the left-side menu.\n> If you are `Channel manager`, `Group Admin` or `Company Admin` role but cannot see Access token tab, please contact our support team to enable Access token feature.\n- If you don't have an access token, please create one by pressing `Create new access token` button. Then give the name for the token that is easier for you to remember.\n\n### Using access token\n- If you already have an access token, press the button with copy icon (next to the token string).\n- To use an access token, you must put it to HTTP request header `Authorization`. Here is cURL example\n```\ncurl --request GET -H \"Authorization: Bearer <your-access-token>\" https://{subdomain}.smarpshare.com/api/{version}/allowed-access-token-api\n```\n- Any API having `access-token` as `Authorizations` option in this documentation is potentially usable with access token, depending on whether you have the requiste user role permission.\n\n## Requests and responses\n### Pagination\n\nSome of the HTTP GET endpoints returns only portion of the requested data per request.\n\nMaximum amount of items returned per request is 1000.\n\nIn order to iterate throughout other items use `next` parameter. The value of `next` could be obtained in the result of request.\n\n#### Example\nAccessing [GET posts](#tag/posts) v1 endpoint.\n\nFirst request\n```\nhttps://smarp.smarpshare.com/api/v1/posts\n```\nIn the response there are 1000 items and link to the reference to the next request in `meta.next`\n\n```\n{\n  \"meta\": {\n    \"next\": \"510000000000000000000000\"  <---- reference to the next request\n  },\n  \"data\": [\n    {\n      \"id\": \"500000000000000000000000\",\n      \"publishedAt\": \"2012-07-13T11:01:20Z\",\n      \"title\": \"Post title N 1\",\n      \"url\": \"https://someurl1\",\n      \"type\": \"link\"\n    },\n    ...\n    {\n      \"id\": \"510000000000000000000000\",\n      \"publishedAt\": \"2013-01-23T15:21:36Z\",\n      \"title\": \"Post title N 1000\",\n      \"url\": \"https://someurl1000\",\n      \"type\": \"link\"\n    }\n  ]\n}\n```\nIn order to get another batch of results send same `HTTP GET` request with `next` parameter.\nThe value of `next` is taken from the results of the previous request.\n\nSecond request\n\n```\n  https://smarp.smarpshare.com/api/v1/posts?next=510000000000000000000000\n```\n\nIn the response there is no `meta.next` value.\n\nIt means that there is no more items to fetch, therefore there is no need to make any more calls.\n\n   ```\n   {\n     \"meta\": {},\n     \"data\": [\n       {\n         \"id\": \"550000000000000000000000\",\n         \"publishedAt\": \"2015-03-11T08:42:40Z\",\n         \"title\": \"Post title N 1001\",\n         \"url\": \"https://someurl1001\",\n         \"type\": \"link\"\n       }\n     ]\n   }\n   ```\n## Anonymity\nSome of the endpoints contain User ID or equivalent field in their reponses.\n\nHowever, certain records in the responses may omit User ID or equivalent for users who are anonymous on Smarp.\n\n### When a user is considered anonymous\n- A user has chosen to be anonymous in his/her personal settings\n- A user belongs to a Group that is set to protect its Users from being identified in analytics due to compliance reasons.\n\n### Example\n```json\n  // UserId is in the response because the user is not anonymised\n  {\n    \"UserId\": \"393c69300000000000000000\",\n    \"PostId\": \"263c69300000000000000000\"\n  }\n\n  // UserId is not in the response because the user is anonymised\n  {\n    \"PostId\": \"493c69300000000000000000\"\n  }\n\n```\n\n## Limits and quotas\n\n### Definition\n\nSmarp has the limits and quotas of requesting the APIs. These limits help Smarp provide a reliable and fast API to everyone. We put limits and quotas on API requests to protect the system from receiving more data than it can handle.\n\n**NOTE: _The limits and quotas are subject to change._**\n\nEach of the different types of rate limits has a specific duration. We start calculating the time after the first call, and at the end of that duration, we reset quotas.\n\n### Current limits and quotas\n\n| Time period | Maximun request count | Quotas condition        |\n| ----------- | --------------------- | ----------------------- |\n| 10 minutes  | 100                   | per endpoint, per token |\n| 24 hours    | 1000                  | per token               |\n\n### Example\n\nFor example, if we have that two limits:\n100 requests per 10 minutes per endpoint per token and 1000 requests per 24 hours per token:\n\n1) We can send 100 requests to 10 different endpoints per day for a single token (100 request  * 10 endpoints = 1000 requests in total). If we do that in 1 hour, it means we should wait for 23 hours to reset quotas or use another token\n\n2) We can send 100 requests to 1 endpoint per 10 minutes. If we do that in 1 minute, it means we should wait for 9 minutes to reset quotas or use another token\n\n3) We can send 100 requests to 1 endpoint and 100 requests to the same endpoint per 10 minutes with a different token.\n",
    "title": "Smarp API Reference",
    "contact": {
      "name": "Tech Support",
      "url": "https://smarp.com/company/#contact-us",
      "email": "support@smarp.com"
    },
    "x-logo": {
      "url": "./img/smarp-logo.png"
    }
  },
  "servers": [
    {
      "url": "https://{subdomain}.smarpshare.com/api/v1",
      "description": "Base domain for API V1",
      "variables": {
        "subdomain": {
          "default": "login",
          "description": "this value is assigned by the service provider"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "clicks",
      "description": "Clicks endpoints"
    },
    {
      "name": "groups",
      "description": "Groups endpoints"
    },
    {
      "name": "ping",
      "description": "Check API availability"
    },
    {
      "name": "posts",
      "description": "Posts endpoints"
    },
    {
      "name": "shares",
      "description": "Shares endpoints"
    },
    {
      "name": "teams",
      "description": "Teams endpoints"
    },
    {
      "name": "users",
      "description": "Users endpoints"
    },
    {
      "name": "channels",
      "description": "Channels endpoints"
    }
  ],
  "paths": {
    "/clicks": {
      "get": {
        "tags": [
          "clicks"
        ],
        "summary": "Returns clicks generated from the posts shared by users to social media",
        "description": "Returns all clicks based on the period in which clicks happened.\n\nThis Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)\n\nRole level required: `Company Admin`\n\n#### Anonymity\n\nThis endpoint supports user (sharerId) [Anonymity](#section/Basic-concepts/Anonymity)\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Clicks that happened after this time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Clicks that happened at or before that time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of clicks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetClicksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Returns groups",
        "description": "Returns all groups within instance\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Check API availability",
        "description": "Endpoint for check availability of server",
        "responses": {
          "200": {
            "description": "Contains PONG response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Returns posts",
        "description": "Returns posts based on the period in which posts were published. Other criteria:\n\n- Posts that have been deleted will not be returned.\n- Posts that were published in private channels will not be returned.\n\nEndpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)\n\nRole level required: `Company Admin`\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Posts that were published after this time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Posts that were published at or before that time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetPostsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/shares": {
      "get": {
        "tags": [
          "shares"
        ],
        "summary": "Returns shares",
        "description": "Returns all shared shares based on the period in which share was done.\n\nThis Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)\n\nRole level required: `Company Admin`\n\n#### Anonymity\n\nThis endpoint supports user (sharerId) [Anonymity](#section/Basic-concepts/Anonymity)\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Shares that created after this time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Shares that created at or before that time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of shares.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetSharesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Returns users in the company",
        "description": "Returns users.\n\nThis endpoint is a subject of\n[pagination](#section/Basic-concepts/Requests-and-responses)\n\nRole level required: `Company Admin`\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "teams"
        ],
        "summary": "Returns teams",
        "description": "Returns all teams in the instance.\n\nThis Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)\n\nRole level required: `Company Admin`\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of teams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetTeamsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/channels": {
      "get": {
        "tags": [
          "channels"
        ],
        "summary": "Returns channels",
        "description": "Returns all channels within instance\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of channels.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetChannelsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    },
    "/reads": {
      "get": {
        "tags": [
          "reads"
        ],
        "summary": "Returns post reads generated from the posts",
        "description": "Returns all post reads based on the period in which reads happened.\n\nThis Endpoint is a subject of [pagination](#section/Basic-concepts/Requests-and-responses)\n\nRole level required: `Company Admin`\n",
        "security": [
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Reads that happened after this time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Reads that happened at or before that time will be returned. Date-time should be in RFC3339 format.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "description": "Link to the next batch of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of reads.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetClicksResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "439": {
            "description": "Quota of API requests was reached",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorEnvelope"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GroupItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the group"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetGroupsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupItem"
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "ClickItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the click"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the click happened"
          },
          "sharerId": {
            "type": "string",
            "description": "Id of the user that shared a post which generated the click"
          },
          "postId": {
            "type": "string",
            "description": "Id of the post that generated the click"
          },
          "socialNetwork": {
            "description": "Name of the social network where the click happened",
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "postId",
          "socialNetwork"
        ]
      },
      "GetClicksResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "PostChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the channel"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the channel was published"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the channel was archived"
          }
        }
      },
      "PostItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the post"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post was published"
          },
          "title": {
            "type": "string",
            "description": "Title of the post"
          },
          "url": {
            "type": "string",
            "description": "URL of the post if the post is a Link-type post"
          },
          "type": {
            "description": "Type of the post",
            "enum": [
              "article",
              "link",
              "image",
              "video"
            ],
            "type": "string"
          },
          "channels": {
            "description": "The list of channels that a post is associated with",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostChannel"
            }
          }
        },
        "required": [
          "id",
          "publishedAt",
          "title",
          "url",
          "type",
          "channels"
        ]
      },
      "GetPostsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "ShareItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the share"
          },
          "sharedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the share happened"
          },
          "sharerId": {
            "type": "string",
            "description": "Id of the user that shared a post which generated the share"
          },
          "postId": {
            "type": "string",
            "description": "Id of the post that generated the share"
          },
          "socialNetwork": {
            "description": "Name of the social network where the share happened",
            "type": "string"
          },
          "uniqueClickCount": {
            "description": "Total number of uniques clicks on social media",
            "type": "integer"
          },
          "likeCount": {
            "description": "Total number of likes on social media",
            "type": "integer"
          },
          "commentCount": {
            "description": "Total number of comments on social media",
            "type": "integer"
          },
          "reshareCount": {
            "description": "Total number of re-shares on social media",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "sharedAt",
          "postId",
          "socialNetwork",
          "uniqueClickCount",
          "likeCount",
          "commentCount",
          "reshareCount"
        ]
      },
      "GetSharesResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShareItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "UserChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the channel"
          }
        }
      },
      "UserItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the user"
          },
          "firstName": {
            "type": "string",
            "description": "first name"
          },
          "lastName": {
            "type": "string",
            "description": "last name"
          },
          "email": {
            "type": "string",
            "description": "email"
          },
          "phoneNumber": {
            "type": "string",
            "description": "phone number"
          },
          "groupId": {
            "type": "string",
            "description": "Id of the group that the user belongs to"
          },
          "teamIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the teams that the user belongs to"
          },
          "channels": {
            "description": "The list of channels that the user subscribes to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChannel"
            }
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "groupId",
          "teamIds",
          "channels"
        ]
      },
      "GetUsersResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "TeamItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the team"
          },
          "name": {
            "type": "string",
            "description": "Name of the team"
          },
          "groupId": {
            "type": "string",
            "description": "ID of the Group that the team belongs to"
          }
        },
        "required": [
          "id",
          "name",
          "groupId"
        ]
      },
      "GetTeamsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "ErrorEnvelope": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object"
          },
          "data": {
            "type": "object"
          },
          "error": {
            "type": "object",
            "required": [
              "code",
              "message"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Status code"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              }
            }
          }
        },
        "required": [
          "error"
        ]
      },
      "ChannelItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the channel"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel"
          },
          "groupId": {
            "type": "string",
            "description": "Id of the group that channel belong to"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the channel was archived"
          }
        },
        "required": [
          "id",
          "name",
          "groupId"
        ]
      },
      "GetChannelsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "PostReadItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the click"
          },
          "postId": {
            "type": "string",
            "description": "Id of the post that generated the read"
          },
          "userId": {
            "type": "string",
            "description": "Id of the user that read a post"
          },
          "platform": {
            "description": "Name of the platform where the read happened",
            "type": "string"
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post was read"
          }
        },
        "required": [
          "id",
          "postId",
          "userId",
          "platform",
          "readAt"
        ]
      },
      "GetPostReadsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object",
            "properties": {
              "next": {
                "type": "string",
                "description": "Link to the next batch of results. Empty in case no more results could be fetched"
              }
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostReadItem"
            }
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "ObjectId": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{24}$"
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
