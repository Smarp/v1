{
  "openapi": "3.0.2",
  "info": {
    "description": "# Versioning API\n## v1\nContains endpoints for getting statistic of Smarp as:\n- clicks\n- shares\n\n[Details](https://smarp.github.io/v1/)\n# Instructions\n## Create access token\nTo get an access token, please check if you have `Channel manager` `Group Admin` or `Company Admin` role (Check your current role by clicking your avatar on the top right-hand corner of the page. Your role is displayed under your name)\n\n- Access your company domain settings using the following URL `https://{subdomain}.smarpshare.com/#/profile/settings`\n- Navigate to `Access token` tab on the left-side menu.\n> If you are `Channel manager` `Group Admin` or `Company Admin` role but cannot see Access token tab, please contact our support team to enable Access token feature.\n- If you don't have an access token, please create one by pressing `Create new access token` button. Then give the name for the token so you remember where are you going to use it.\n\n## Using access token\n- If you already have access token, press button with copy icon (next to token string).\n- To use access token, you must put it to HTTP request header `Authorization`. Here is cURL example\n```\ncurl --request GET -H \"Authorization: Bearer <your-access-token>\" https://{subdomain}.smarpshare.com/api/allowed-access-token-api\n```\n- Any API having `access-token` as `Authorizations` option in this documentation is usable with access token.\n",
    "version": "1.0.0",
    "title": "Smarp API Reference",
    "contact": {
      "name": "Tech Support",
      "url": "https://smarp.com/company/#contact-us",
      "email": "support@smarp.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "./img/smarp-logo.png"
    }
  },
  "servers": [
    {
      "url": "https://{subdomain}.smarpshare.com/api",
      "description": "The production API server",
      "variables": {
        "subdomain": {
          "default": "login",
          "description": "this value is assigned by the service provider"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "post",
      "description": "Everything about Post",
      "x-public": true
    },
    {
      "name": "channel",
      "description": "Everything about Channel"
    },
    {
      "name": "group",
      "description": "Everything about Group"
    },
    {
      "name": "onboarding",
      "description": "Everything about onboarding"
    },
    {
      "name": "comment",
      "description": "Everything about comment"
    },
    {
      "name": "share",
      "description": "Everything about sharing"
    }
  ],
  "paths": {
    "/auth/password": {
      "post": {
        "servers": [
          {
            "url": "https://{subdomain}.smarpshare.com",
            "variables": {
              "subdomain": {
                "default": "login",
                "description": "this value is assigned by the service provider"
              }
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "operationId": "authPasswordPost",
        "summary": "Login with password",
        "requestBody": {
          "description": "id of post to bookmark",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredential"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "redirectUrl": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/mobile/redirect": {
      "get": {
        "servers": [
          {
            "url": "https://{subdomain}.smarpshare.com",
            "variables": {
              "subdomain": {
                "default": "login",
                "description": "this value is assigned by the service provider"
              }
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "operationId": "authMobileRedirect",
        "summary": "Generate mobile redirect link",
        "responses": {
          "200": {
            "description": "Link generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "link": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark": {
      "post": {
        "tags": [
          "bookmark",
          "post"
        ],
        "operationId": "createBookmark",
        "summary": "Create bookmark",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "id of post to bookmark",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "postId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bookmark successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bookmarkId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark/{bookmarkId}": {
      "delete": {
        "tags": [
          "bookmark",
          "post"
        ],
        "operationId": "deleteBookmark",
        "summary": "Delete bookmark",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookmarkId",
            "in": "path",
            "description": "Id of the bookmark to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfully"
          }
        }
      }
    },
    "/bookmark2": {
      "post": {
        "tags": [
          "bookmark",
          "post"
        ],
        "operationId": "createBookmark2",
        "summary": "Create bookmark",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "id of post to bookmark",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "postId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bookmark successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bookmarkId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "bookmark",
          "post"
        ],
        "operationId": "retrieveBookmarkList2",
        "summary": "Retrieve bookmark list",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "object id from which all older (inclusive) bookmarks are ignored",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of 10 bookmarks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookmarkPost"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmark2/{bookmarkId}": {
      "delete": {
        "tags": [
          "bookmark",
          "post"
        ],
        "operationId": "deleteBookmark2",
        "summary": "Delete bookmark",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "bookmarkId",
            "in": "path",
            "description": "Id of the bookmark to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfully"
          }
        }
      }
    },
    "/channel": {
      "get": {
        "x-public": true,
        "tags": [
          "channel"
        ],
        "operationId": "getChannelList",
        "summary": "Get channel list",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "description": "type of the channels to filter by",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "full"
              ]
            }
          },
          {
            "name": "groupedBy",
            "in": "query",
            "description": "indicate the structure that channels are responsed",
            "schema": {
              "type": "string",
              "enum": [
                "group"
              ]
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "retrieve list of channels of a group",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "isSubscribed",
            "in": "query",
            "description": "retrieve list of channels based on current session user's subscription",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Channel"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Only when query 'groupedBy' is provided. Ignore the status code, it should be 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupedChannel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "channel"
        ],
        "operationId": "createItem",
        "summary": "Create a new channel",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Group to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelWrite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "_id"
                  ],
                  "properties": {
                    "_id": {
                      "$ref": "#/components/schemas/ObjectId",
                      "description": "Id of new channel"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comment": {
      "get": {
        "tags": [
          "comment",
          "post",
          "resource"
        ],
        "operationId": "getCommentList",
        "summary": "Get comment list",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "objectId",
            "in": "query",
            "description": "id of either post or resource that users commented on",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectType",
            "in": "query",
            "description": "either post or resource",
            "schema": {
              "type": "string",
              "enum": [
                "post",
                "resource"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "comments"
                  ],
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "comment",
          "post",
          "resource"
        ],
        "operationId": "createComment",
        "summary": "Create a new comment",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Comment to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New comment id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/ObjectId",
                      "description": "Id of new comment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "comment",
          "post",
          "resource"
        ],
        "operationId": "editComment",
        "summary": "Edit comment",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Comment to be edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditComment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment edited successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "comment",
          "post",
          "resource"
        ],
        "operationId": "deleteComment",
        "summary": "Delete comment",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Comment to be deleted",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/ObjectId",
                    "description": "Id of deleted comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          }
        }
      }
    },
    "/company/{companyId}": {
      "put": {
        "tags": [
          "company"
        ],
        "operationId": "modifyCompany",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Modify company by id",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Id of the company to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Company edit params",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyCompanyStruct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit company successfully"
          }
        }
      }
    },
    "/channel/{channelId}": {
      "put": {
        "tags": [
          "channel"
        ],
        "operationId": "editChannel",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Edit channel",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of the channel to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Channel to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ChannelWrite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel editted successfully"
          }
        }
      }
    },
    "/team": {
      "get": {
        "tags": [
          "team"
        ],
        "summary": "Get list of teams",
        "operationId": "getTeamList",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group the teams belong to",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of teams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "team"
        ],
        "summary": "Create team",
        "operationId": "createTeam",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Team to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team create response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Team Id",
                  "type": "object",
                  "properties": {
                    "_id": {
                      "$ref": "#/components/schemas/ObjectId"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/team/{teamid}": {
      "get": {
        "tags": [
          "team"
        ],
        "operationId": "getTeamById",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get team by Id",
        "parameters": [
          {
            "name": "teamid",
            "in": "path",
            "description": "Id of the team to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "team"
        ],
        "operationId": "editTeam",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Edit team by Id",
        "parameters": [
          {
            "name": "teamid",
            "in": "path",
            "description": "Id of the team to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Team to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/EditTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit team item successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "team"
        ],
        "operationId": "deleteTeam",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete team by Id",
        "parameters": [
          {
            "name": "teamid",
            "in": "path",
            "description": "Id of the team to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete team item successfully"
          }
        }
      }
    },
    "/team/{teamId}/member/list": {
      "get": {
        "tags": [
          "team"
        ],
        "operationId": "getTeamMemberList",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get team by Id",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of the team to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromId",
            "in": "query",
            "description": "Id of last item for pagination",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSortValue",
            "in": "query",
            "description": "Value of last item, depends on sort attribute",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortAttr",
            "in": "query",
            "description": "Sort attribute",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortReverse",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isFull",
            "in": "query",
            "description": "Whether to retrieve full list without pagination",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Members of the team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/team/{teamId}/member/add": {
      "post": {
        "tags": [
          "team"
        ],
        "operationId": "addTeamMember",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Add member to team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Members to be removed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added successfully"
          }
        }
      }
    },
    "/team/{teamId}/member/remove": {
      "delete": {
        "tags": [
          "team"
        ],
        "operationId": "deleteTeamMember",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Remove member from team",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "Id of the team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Members to be removed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveTeamMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Removed successfully"
          }
        }
      }
    },
    "/post3": {
      "get": {
        "x-public": true,
        "tags": [
          "post"
        ],
        "summary": "Returns all posts from the system visible to the user",
        "operationId": "getPostList",
        "security": [
          {
            "cookieAuth": []
          },
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "type of the posts to filter by",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "incoming",
                "published",
                "archived",
                "scheduled",
                "all",
                "own",
                "bookmark"
              ],
              "default": "published"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number for fetching the next patch of posts, starting from 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "number of posts fetched for the page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "channelId",
            "in": "query",
            "description": "filter post by channel",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "filter post by search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "x-public": true,
        "tags": [
          "post"
        ],
        "summary": "Create Post",
        "operationId": "createPost",
        "security": [
          {
            "cookieAuth": []
          },
          {
            "access-token": []
          }
        ],
        "requestBody": {
          "description": "Create post",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of posts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCreateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post3/{postId}": {
      "get": {
        "tags": [
          "post"
        ],
        "operationId": "getPostById",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get post by Id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "post"
        ],
        "operationId": "editPost",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Edit post by Id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Edited post properties",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit post successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "post"
        ],
        "operationId": "deletePost",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfully"
          }
        }
      }
    },
    "/post3/{postId}/like": {
      "get": {
        "tags": [
          "post",
          "like"
        ],
        "operationId": "getPostLike",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get post like by post id",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post likes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLike"
                }
              }
            }
          }
        }
      }
    },
    "/post3/{postId}/feedback": {
      "post": {
        "tags": [
          "post"
        ],
        "operationId": "addPostFeedback",
        "summary": "Add feedback to post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to unlike",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Feedback message",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "message"
                ],
                "properties": {
                  "message": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add feedback successfully"
          }
        }
      }
    },
    "/post3/{postId}/tracker": {
      "post": {
        "tags": [
          "post"
        ],
        "operationId": "trackPostRead",
        "summary": "Track user has read the post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post the user read",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Track read successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "uniqueReadCount"
                  ],
                  "properties": {
                    "uniqueReadCount": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/post3/{postId}/confirmread": {
      "post": {
        "tags": [
          "post"
        ],
        "operationId": "confirmPostRead",
        "summary": "To confirm that the user has read the post, for post that requires read confirmation.",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post the user confirms reading",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirm read successfully"
          }
        }
      }
    },
    "/post3/{postId}/confirmations/export": {
      "get": {
        "tags": [
          "post"
        ],
        "operationId": "exportReadConfirmationList",
        "summary": "To export data in csv format of the subscribers of the post who have confirmed reading the post, for a post that requires confirmation.",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post the user wants to export data of",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export data successfully"
          }
        }
      }
    },
    "/saml/api/idp": {
      "put": {
        "servers": [
          {
            "url": "https://{subdomain}.smarpshare.com",
            "variables": {
              "subdomain": {
                "default": "login",
                "description": "this value is assigned by the service provider"
              }
            }
          }
        ],
        "tags": [
          "saml"
        ],
        "operationId": "samlUpdateConfiguration",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Update SAML configuration",
        "requestBody": {
          "description": "SAML configuration params",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "metadata": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SAML configuration updated"
          }
        }
      }
    },
    "/saml/sp/metadata": {
      "get": {
        "servers": [
          {
            "url": "https://{subdomain}.smarpshare.com",
            "variables": {
              "subdomain": {
                "default": "login",
                "description": "this value is assigned by the service provider"
              }
            }
          }
        ],
        "tags": [
          "saml"
        ],
        "operationId": "samlGetSmarpMetadata",
        "summary": "Get Smarp SAML metadata for sumdomain",
        "responses": {
          "200": {
            "description": "Smarp metadata file",
            "content": {
              "text/xml;charset=ISO-8859-1": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/group": {
      "get": {
        "tags": [
          "group"
        ],
        "operationId": "getGroupList",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get all group of the current company",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "emailDomain"
              ],
              "description": "Retrieve list of groups based on emailDomains if filter=emailDomain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "operationId": "createGroup",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Create new group",
        "requestBody": {
          "description": "Group to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "_id"
                  ],
                  "properties": {
                    "_id": {
                      "$ref": "#/components/schemas/ObjectId",
                      "description": "Id of new group"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/group/{groupId}": {
      "put": {
        "tags": [
          "group"
        ],
        "operationId": "editGroup",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Edit group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/EditGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group editted successfully"
          }
        }
      }
    },
    "/group/{groupId}/channel/default": {
      "put": {
        "tags": [
          "group"
        ],
        "operationId": "setDefaultChannelsForGroup",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Set essential and default channels for a group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/SetDefaultChannels"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Set default channels for group successfully"
          }
        }
      },
      "get": {
        "tags": [
          "group"
        ],
        "operationId": "retrieveDefaultChannelsForGroup",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve essential and default channels for a group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get default channels for group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GetDefaultChannels"
                }
              }
            }
          }
        }
      }
    },
    "/group/{groupId}/digest": {
      "get": {
        "tags": [
          "group"
        ],
        "operationId": "retrieveGroupDigestSettings",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve digest settings of a group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get digest setting for group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GroupDigestSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "operationId": "modifyGroupDigestSettings",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Modify digest settings of a group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New digest settings",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/GroupDigestSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group digest settings modified successfully"
          }
        }
      }
    },
    "/group/{groupId}/invitation/permission": {
      "put": {
        "tags": [
          "group"
        ],
        "operationId": "updateGroupInvitationPermission",
        "summary": "Update Group Invitation Permission",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the requested Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of new Group Invitation Permission setting",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationPermission"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successfully"
          }
        }
      },
      "get": {
        "tags": [
          "group"
        ],
        "operationId": "getGroupInvitationPermission",
        "summary": "Get Group Invitation Permission",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the requested Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group Invitation Permission Setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationPermission"
                }
              }
            }
          }
        }
      }
    },
    "/group/{groupId}/invitation/template": {
      "put": {
        "tags": [
          "group"
        ],
        "operationId": "updateGroupInvitationEmailTemplate",
        "summary": "Update Group Invitation Email Template",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the requested Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of new Group Invitation Permission setting",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationEmailTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successfully"
          }
        }
      },
      "get": {
        "tags": [
          "group"
        ],
        "operationId": "getGroupInvitationEmailTemplate",
        "summary": "Get Group Invitation Email Template",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the requested Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group Invitation Email Template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationEmailTemplate"
                }
              }
            }
          }
        }
      }
    },
    "/group/{groupId}/visibility": {
      "get": {
        "tags": [
          "group"
        ],
        "operationId": "retrieveGroupVisibilitySettings",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve visibility settings of a group",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get visibility settings for group successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/GroupVisibilitySettingsResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "operationId": "modifyGroupVisibilitySettings",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Modify visibility settings of a group",
        "description": "accessibleGroups must contains all accessible Groups, including the current Group itself",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New visibility settings",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/GroupVisibilitySettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group visibility settings modified successfully"
          }
        }
      }
    },
    "/lang/map": {
      "put": {
        "tags": [
          "lang"
        ],
        "operationId": "mapPostLang",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Map languages for existing content",
        "requestBody": {
          "description": "Timeframe and list of instances that need to be mapped",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "companyIds"
                ],
                "properties": {
                  "companyIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "example": [
                      "5c69d9600000000000000000",
                      "5c69d9600000000000000001"
                    ]
                  },
                  "startingDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endingDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Map successfully"
          },
          "403": {
            "description": "Smarper only"
          },
          "500": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/analytics/auth": {
      "get": {
        "tags": [
          "analytics"
        ],
        "operationId": "getAnalyticAuth",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "SSO for Internal Analtyic service",
        "responses": {
          "303": {
            "description": "Redirect to SSO path"
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected Error"
          }
        }
      }
    },
    "/analytics/dashboards": {
      "get": {
        "tags": [
          "analytics"
        ],
        "operationId": "getDashboardIds",
        "security": [
          {
            "cookieAuth": []
          },
          {
            "access-token": []
          }
        ],
        "responses": {
          "200": {
            "description": "return list of dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Id of the dashboard",
                        "$ref": "#/components/schemas/ObjectId"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name identifier of the dashboard, eg. 'overview'"
                      },
                      "label": {
                        "type": "string",
                        "description": "Display name of the dashboard, eg. 'Overview'"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/videostream": {
      "get": {
        "tags": [
          "analytics"
        ],
        "operationId": "getAnalyticVideoStream",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Amount of video streamed per month",
        "responses": {
          "200": {
            "description": "Amount of video streamed in month",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VideoStreamInList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/insight/post/channel": {
      "get": {
        "tags": [
          "analytics"
        ],
        "operationId": "getInsightPostChannel",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get Insights on Channel Performance",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total Post Share Based On Channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostShareTotalBasedOnChannelModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analytics/insight/post/campaign/channel": {
      "get": {
        "tags": [
          "analytics"
        ],
        "operationId": "getInsightCampaignChannel",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get Insights on Campaign Performance based on Group Channels",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start Date",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End Date",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Total Post Share Based On Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostShareTotalBasedOnCampaignModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/me/group": {
      "put": {
        "tags": [
          "me"
        ],
        "operationId": "setGroupForNewUser",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Assign user to the group in the request",
        "requestBody": {
          "description": "New User onboarding to a group",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "groupId"
                ],
                "properties": {
                  "groupId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group for user was modified successfully"
          }
        }
      }
    },
    "/fulltext": {
      "post": {
        "tags": [
          "post"
        ],
        "operationId": "getPlainText",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Rerieving plain text from given html",
        "requestBody": {
          "description": "Html",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "html"
                ],
                "properties": {
                  "html": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rerieving plain text from given html",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "text"
                  ],
                  "properties": {
                    "text": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "get": {
        "tags": [
          "token"
        ],
        "summary": "Get list of tokens",
        "operationId": "getToken",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "token"
        ],
        "summary": "Create token",
        "operationId": "createToken",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "token to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "token create response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "token Id",
                  "type": "object",
                  "properties": {
                    "_id": {
                      "$ref": "#/components/schemas/ObjectId"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "token"
        ],
        "summary": "Delete token",
        "operationId": "deleteToken",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "delete token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "delete token successfully"
          }
        }
      }
    },
    "/like/{postId}": {
      "post": {
        "tags": [
          "like",
          "post"
        ],
        "operationId": "likePost",
        "summary": "Like a Post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to like",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Like post successfully"
          }
        }
      }
    },
    "/unlike/{postId}": {
      "post": {
        "tags": [
          "like",
          "post"
        ],
        "operationId": "unlikePost",
        "summary": "Unlike a post",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to unlike",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unlike post successfully"
          }
        }
      }
    },
    "/share": {
      "post": {
        "tags": [
          "share"
        ],
        "operationId": "createShare",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Share a post with a social network",
        "requestBody": {
          "description": "Share properties",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreateRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post share successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shareId": {
                      "type": "string",
                      "description": "Sharing id"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL for the shared resource"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "share"
        ],
        "operationId": "confirmShare",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Confirm a successful post share with a social network",
        "requestBody": {
          "description": "Share properties",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareConfirmRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post share successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shareId": {
                      "type": "string",
                      "description": "Sharing id"
                    },
                    "url": {
                      "type": "string",
                      "description": "URL for the shared resource"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/share/smart": {
      "post": {
        "tags": [
          "share"
        ],
        "operationId": "postShareSmart",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Share a post at the best time",
        "requestBody": {
          "description": "Edited post properties",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelSmartShareCreateParam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post sharing scheduled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Sharing id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{UserId}": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "editUser",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Edit user by Id",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "Id of the user to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEdit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit user successfully"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "retrieveUser",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve user by Id",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "Id of the user to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "user to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGet"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieved user successfully"
          }
        }
      }
    },
    "/user/preview/{userid}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "previewUser",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get user preview by Id",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Id of the user to preview",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User basic info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreview"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get profiles based on a session.companyId, regardless of anonymity, group, team",
        "operationId": "getProfiles",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "find users by searchTerm in some of the properties",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number for fetching the portion of users, starting from 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserProfilesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/profile/count": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userProfileCount",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Count profiles",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "find users by searchTerm in some of the properties",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Amount of profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/readers/{postId}": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userGetPostReaders",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "Id of the post to find readers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameStarts",
            "in": "query",
            "description": "A text from which user first or last name starts",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Retrieve users who are able to read the post. Max amount is 25.",
        "responses": {
          "200": {
            "description": "A list of queued users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostReadersResult"
                }
              }
            }
          }
        }
      }
    },
    "/user/register/reminder": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "userPutRegisterReminder",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Register a mass reminder for user",
        "requestBody": {
          "description": "Params to find users to register reminder",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterMassRemindParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of adding remainders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/launch/reminder": {
      "put": {
        "tags": [
          "user",
          "launch",
          "reminder"
        ],
        "summary": "Put launch reminder",
        "operationId": "putUserLaunchReminder",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "description": "Put launch reminder request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserLaunchReminder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of sending launch reminders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/invitation/reminder": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "userPutInvitationReminder",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Invitation mass reminder for user",
        "requestBody": {
          "description": "Params to find users to refferal reminder",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPutInvitationReminderParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of adding remainders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/launch/send": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "userPutLaunchSent",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Launch invitation mass send",
        "requestBody": {
          "description": "Params to find users to launch invitation mass send",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLaunchInvitationMassSendParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of launching invitations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/group/": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "userPutGroup",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Modify group for list of users",
        "requestBody": {
          "description": "Params to find users to modify",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMassModifyGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of modification users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/{UserId}/role": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "userEditRole",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Modify user role",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "Id of the user to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User role modification params",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModifyRoleParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User has been modified"
          }
        }
      }
    },
    "/user/{UserId}/resetpoints": {
      "post": {
        "tags": [
          "user"
        ],
        "operationId": "userReset",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Reset user transaction",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "Id of the user to reset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction has been reset"
          }
        }
      }
    },
    "/user/count": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userCount",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Count users with params",
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "description": "Id of the last retrieved user, used for pagination",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "find users who belong to this Group",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "team",
            "in": "query",
            "description": "find users who belong to this Team. Zero value is \"noteam\".",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Email of the user who wants to search for.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userTag",
            "in": "query",
            "description": "find users who has this tag (for Classic)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortReverse",
            "in": "query",
            "description": "sort direction",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "find users who have done a certain action.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "registered",
                "unregistered",
                "shared",
                "unshared"
              ]
            }
          },
          {
            "name": "userType",
            "in": "query",
            "description": "find users with/without role",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "employee",
                "manager"
              ]
            }
          },
          {
            "name": "sortAttr",
            "in": "query",
            "description": "the attribute which is used to sort the retrieved list",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "point",
                "email",
                "lastActive"
              ]
            }
          },
          {
            "name": "lastSortValue",
            "in": "query",
            "description": "Value of the last retrieved user, based on sortAttr. Used for pagination.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastActiveFilter",
            "in": "query",
            "description": "Filter retrieved users based on last activity. \"inte\" for inactive, \"i\" for active.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inte7",
                "inte30",
                "inte60",
                "inte90",
                "i7",
                "i30",
                "i60",
                "i90"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Amount of users with params",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/launch": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userGetLaunch",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve invitation list",
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortReverse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortAttr",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSortValue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastActiveFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "operationId": "userCreateLaunch",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Create invitation",
        "requestBody": {
          "description": "Create invitation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchUserResponseStruct"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "operationId": "userDeleteLaunch",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete invitations with params",
        "requestBody": {
          "description": "Params delete invitations",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLaunchInvitationMassDestroyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Amount of users with params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/invitation": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userGetInvitation",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve invitation list",
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortReverse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortAttr",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSortValue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastActiveFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "operationId": "userDeleteInvitation",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete invitations with params",
        "requestBody": {
          "description": "Params delete invitations",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInvitationMassDestroyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Amount of users with params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/queue": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userGetQueue",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Retrieve queued users",
        "responses": {
          "200": {
            "description": "A list of queued users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserQueueResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "operationId": "userDeleteQueue",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete queued users",
        "requestBody": {
          "description": "A list of user id",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectId"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Result of deleting of queued users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/sendemail": {
      "post": {
        "tags": [
          "user"
        ],
        "operationId": "userMassSendMail",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "User send email",
        "requestBody": {
          "description": "Email params",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMassSendMail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of sending emails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/user/queue/count": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "userGetQueueCount",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Count queued users",
        "responses": {
          "200": {
            "description": "Amount of queued users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "count"
                  ],
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/queue/order": {
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "userPutQueueOrder",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Modify queued users order",
        "requestBody": {
          "description": "A list of queued users to be modified",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QueuedUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Queued users order modified"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get list of users, depends on session role. Smarpers will get all users from all company.",
        "operationId": "getUserList",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "fromId",
            "in": "query",
            "description": "Id of the last retrieved user, used for pagination",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "find users who belong to this Group",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "team",
            "in": "query",
            "description": "find users who belong to this Team. Zero value is \"noteam\".",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Email of the user who wants to search for.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userTag",
            "in": "query",
            "description": "find users who has this tag (for Classic)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortReverse",
            "in": "query",
            "description": "sort direction",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "find users who have done a certain action.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "registered",
                "unregistered",
                "shared",
                "unshared"
              ]
            }
          },
          {
            "name": "userType",
            "in": "query",
            "description": "find users with/without role",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "employee",
                "manager"
              ]
            }
          },
          {
            "name": "sortAttr",
            "in": "query",
            "description": "the attribute which is used to sort the retrieved list",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "point",
                "email",
                "lastActive"
              ]
            }
          },
          {
            "name": "lastSortValue",
            "in": "query",
            "description": "Value of the last retrieved user, based on sortAttr. Used for pagination.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastActiveFilter",
            "in": "query",
            "description": "Filter retrieved users based on last activity. \"inte\" for inactive, \"i\" for active.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inte7",
                "inte30",
                "inte60",
                "inte90",
                "i7",
                "i30",
                "i60",
                "i90"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "List"
                  ],
                  "properties": {
                    "List": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserInList"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "sendLoginLink",
        "summary": "Send login link to user",
        "requestBody": {
          "description": "User data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login link have been sent"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "operationId": "deleteQueuedUsers",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete queued users",
        "requestBody": {
          "description": "users ids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectId"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A result of deleting users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMassActionResponseStruct"
                }
              }
            }
          }
        }
      }
    },
    "/lang": {
      "get": {
        "tags": [
          "lang"
        ],
        "operationId": "getLanguage",
        "security": [
          {
            "cookieAuth": []
          },
          {
            "access-token": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "type of filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "company",
                "supportedRead"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "return list of language",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Country name"
                      },
                      "value": {
                        "type": "string",
                        "description": "Country code"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lang/detect": {
      "post": {
        "tags": [
          "lang"
        ],
        "operationId": "detectLanguage",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Detect language of existing content",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text"
                ],
                "properties": {
                  "text": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Detect successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "language"
                  ],
                  "properties": {
                    "language": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "confidence",
                          "value"
                        ],
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Display name of detected language"
                          },
                          "value": {
                            "type": "string",
                            "description": "Value of detected language"
                          },
                          "confidence": {
                            "type": "number",
                            "description": "Level of confidence of detection"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/identity/aws": {
      "get": {
        "tags": [
          "identity"
        ],
        "operationId": "getAwsIdentity",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get AWS Identity",
        "responses": {
          "200": {
            "description": "Return Identity and Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Identity"
                }
              }
            }
          }
        }
      }
    },
    "/video/play/issue-cookie": {
      "get": {
        "tags": [
          "video"
        ],
        "operationId": "getMediaCookie",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get issued Cookies to play media",
        "parameters": [
          {
            "in": "query",
            "name": "postId",
            "schema": {
              "type": "string"
            },
            "description": "post ID of which user would like to play video"
          }
        ],
        "responses": {
          "200": {
            "description": "Return cookies header",
            "headers": {
              "CloudFront-Key-Pair-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "keypair ID"
              },
              "CloudFront-Policy": {
                "schema": {
                  "type": "string"
                },
                "description": "Policy ID"
              },
              "Signature": {
                "schema": {
                  "type": "string"
                },
                "description": "Signature ID"
              }
            }
          }
        }
      }
    },
    "/oauth/directory/microsoft": {
      "get": {
        "servers": [
          {
            "url": "https://{subdomain}.smarpshare.com",
            "variables": {
              "subdomain": {
                "default": "login",
                "description": "this value is assigned by the service provider"
              }
            }
          }
        ],
        "tags": [
          "oauth"
        ],
        "operationId": "oauthSetupMicrosoftDirectory",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Setup microsoft directory",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": "Redirect user to consent page to ask for permission"
          }
        }
      }
    },
    "/resource2": {
      "get": {
        "tags": [
          "resource"
        ],
        "summary": "Get list of resources",
        "operationId": "getResourceList",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "description": "group the resources belong to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number for fetching the next patch of resources, starting from 0. Page size is fixed at 10.",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of the resources to be retrieve",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "page",
                "link"
              ],
              "default": "page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of resources.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resource2/{resourceid}": {
      "get": {
        "tags": [
          "resource"
        ],
        "operationId": "getResourceById",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Get resource by id.",
        "parameters": [
          {
            "name": "resourceid",
            "in": "path",
            "description": "Id of the resource to get",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "resource"
        ],
        "operationId": "editResource",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Edit resource by id.",
        "parameters": [
          {
            "name": "resourceid",
            "in": "path",
            "description": "Id of the resource to edit",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "requestBody": {
          "description": "Resource to edit",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Resource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Edit resource item successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "resource"
        ],
        "operationId": "deleteResource",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "summary": "Delete resource by id.",
        "parameters": [
          {
            "name": "resourceid",
            "in": "path",
            "description": "Id of the resource to edit",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete resource item successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCredential": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "email",
              "password"
            ],
            "properties": {
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "phone",
              "password"
            ],
            "properties": {
              "phone": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          }
        ]
      },
      "BookmarkPost": {
        "type": "object",
        "required": [
          "id",
          "post"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the bookmark"
          },
          "post": {
            "$ref": "#/components/schemas/Post"
          }
        }
      },
      "CommentAuthor": {
        "type": "object",
        "properties": {
          "avatarUrl": {
            "type": "string",
            "description": "Image avatar url"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        },
        "required": [
          "avatarUrl",
          "firstName",
          "lastName"
        ]
      },
      "CommentContent": {
        "type": "object",
        "properties": {
          "addedAt": {
            "type": "string",
            "description": "Date comment was added"
          },
          "addedBy": {
            "type": "string",
            "description": "Id of the author"
          },
          "id": {
            "type": "string",
            "description": "Id of the comment"
          },
          "text": {
            "type": "string",
            "description": "Raw text content of comment, the mentions are not substituted with textual values"
          },
          "displayText": {
            "type": "string",
            "description": "Text content of comment without markdown elements"
          },
          "mentions": {
            "type": "array",
            "description": "List of Mentions inside the comment",
            "items": {
              "$ref": "#/components/schemas/Mention",
              "description": "Mentions inside the comment"
            }
          }
        },
        "required": [
          "addedAt",
          "addedBy",
          "id",
          "text"
        ]
      },
      "Mention": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First Name of mentioned user"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of mentioned user"
          },
          "userId": {
            "$ref": "#/components/schemas/ObjectId",
            "description": "Id of mentioned user"
          }
        },
        "required": [
          "fullName",
          "avatarUrl",
          "userId"
        ]
      },
      "Comment": {
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/CommentAuthor",
            "description": "Author of comment"
          },
          "comment": {
            "$ref": "#/components/schemas/CommentContent",
            "description": "Information and content of comment"
          }
        },
        "required": [
          "author",
          "comment"
        ]
      },
      "AddComment": {
        "type": "object",
        "properties": {
          "objectId": {
            "type": "string",
            "description": "Target of the comment"
          },
          "objectType": {
            "type": "string",
            "description": "Target type, either post or resource"
          },
          "text": {
            "type": "string",
            "description": "The text user commented"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            },
            "description": "The list of user Ids mentioned in the comment"
          }
        },
        "required": [
          "objectId",
          "objectType",
          "text"
        ]
      },
      "EditComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of comment to edit"
          },
          "text": {
            "type": "string",
            "description": "New text"
          },
          "mentions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            },
            "description": "The list of user Ids mentioned in the comment"
          }
        },
        "required": [
          "id",
          "text"
        ]
      },
      "ModifyCompanyStruct": {
        "type": "object",
        "properties": {
          "samlEnabled": {
            "type": "boolean",
            "description": "Enable or disable SAML"
          }
        }
      },
      "Channel": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "createdAt",
          "description",
          "subscriberCount",
          "subscriptionStatus",
          "createdByDisplay",
          "isActive",
          "managerList",
          "groupName"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of channel"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the channel was created"
          },
          "subscriberCount": {
            "type": "number",
            "format": "int32",
            "description": "Number of subscriber of the channel"
          },
          "subscriptionStatus": {
            "type": "boolean",
            "description": "Subscription status of the user in the channel"
          },
          "createdByDisplay": {
            "type": "string",
            "description": "Name of the channel creator",
            "deprecated": true
          },
          "managerList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Id of the Channel Manager"
                },
                "firstName": {
                  "type": "string",
                  "description": "first name of the Channel Manager"
                },
                "lastName": {
                  "type": "string",
                  "description": "last name of the Channel Manager"
                }
              }
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the channel"
          },
          "isActive": {
            "type": "boolean",
            "description": "Status of the channel"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Channel is mandatory for Company or teams where the user belongs to"
          },
          "groupId": {
            "type": "string",
            "description": "Id of group that channel belongs"
          },
          "groupName": {
            "type": "string",
            "description": "Name of group that channel belongs"
          },
          "isManager": {
            "type": "boolean",
            "description": "User has management right for this channel or not."
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Mark a private Channel. Users who aren't subscibed to a private channel won't be able to retrieve the channel."
          }
        }
      },
      "ChannelReadPublic": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "groupId",
          "groupName"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the Channel",
            "$ref": "#/components/schemas/ObjectId"
          },
          "name": {
            "type": "string",
            "description": "Name of the Channel"
          },
          "groupId": {
            "type": "string",
            "description": "Id of the group to which channel belongs",
            "$ref": "#/components/schemas/ObjectId"
          },
          "groupName": {
            "type": "string",
            "description": "Name of the group to which channel belongs"
          }
        }
      },
      "ChannelWrite": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of channel"
          },
          "name": {
            "type": "string",
            "description": "Name of the channel"
          },
          "description": {
            "type": "string",
            "description": "Description of the channel"
          },
          "companyId": {
            "type": "string",
            "description": "Id of the company to which channel belongs",
            "$ref": "#/components/schemas/ObjectId"
          },
          "groupId": {
            "type": "string",
            "description": "Id of the group to which channel belongs",
            "$ref": "#/components/schemas/ObjectId"
          },
          "isActive": {
            "type": "boolean",
            "description": "Status of the channel"
          },
          "managerList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Id of the Channel Manager"
                },
                "firstName": {
                  "type": "string",
                  "description": "first name of the Channel Manager"
                },
                "lastName": {
                  "type": "string",
                  "description": "last name of the Channel Manager"
                }
              }
            }
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Privacy status of the channel"
          }
        }
      },
      "TeamChannel": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Team": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "memberCount",
          "mandatoryChannelList",
          "recommendedChannelList"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "memberCount": {
            "type": "number"
          },
          "mandatoryChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamChannel"
            }
          },
          "recommendedChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamChannel"
            }
          },
          "groupName": {
            "type": "string"
          }
        }
      },
      "EditTeam": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "mandatoryChannelList",
          "recommendedChannelList",
          "isLabEnabled"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isLabEnabled": {
            "type": "boolean"
          },
          "mandatoryChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamChannel"
            }
          },
          "recommendedChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamChannel"
            }
          }
        }
      },
      "CreateTeam": {
        "type": "object",
        "required": [
          "name",
          "groupId"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "groupId": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      },
      "AddTeamMember": {
        "type": "object",
        "required": [
          "userIdList"
        ],
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RemoveTeamMember": {
        "type": "object",
        "required": [
          "userIdList",
          "selectAll"
        ],
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "TeamMember": {
        "type": "object",
        "required": [
          "_id",
          "firstName",
          "lastName",
          "email",
          "avatarUrl",
          "socnetList",
          "role",
          "point",
          "lastActive",
          "teamList",
          "isMember"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "socnetList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "role": {
            "type": "string"
          },
          "point": {
            "type": "number"
          },
          "lastActive": {
            "type": "string",
            "format": "date-time"
          },
          "teamList": {
            "type": "array",
            "description": "Teams this member belongs to",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "name"
              ],
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "isMember": {
            "type": "boolean",
            "description": "Is this member belongs to the retrieved team"
          }
        }
      },
      "Post": {
        "type": "object",
        "required": [
          "_id",
          "url",
          "title",
          "body",
          "htmlBody",
          "imageUrlList",
          "createdBy",
          "createdByDisplay",
          "createdByType",
          "createdByAvatar",
          "updatedBy",
          "updatedAt",
          "filteredChannelList",
          "fullChannelList",
          "campaignId",
          "campaignName",
          "campaignColor",
          "proposeComment",
          "socnetSet",
          "commentEnabled",
          "commentList",
          "lang",
          "type"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the post"
          },
          "url": {
            "type": "string",
            "description": "Url of the post. Note has empty string as url"
          },
          "videoUrl": {
            "type": "string",
            "description": "Video Url of the post. Note has empty string as url"
          },
          "title": {
            "type": "string",
            "description": "Title of the post"
          },
          "body": {
            "type": "string",
            "deprecated": true,
            "description": "Body of the post. DEPRECATED, replaced by `description` and `fullBody`"
          },
          "description": {
            "type": "string",
            "description": "short description text of the post's body"
          },
          "fullBody": {
            "type": "string",
            "description": "full post's body text"
          },
          "htmlBody": {
            "type": "string",
            "description": "rich text post's body"
          },
          "imageUrlList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of a post's image url"
          },
          "createdBy": {
            "type": "string",
            "description": "Post's creator Id"
          },
          "createdByDisplay": {
            "type": "string",
            "description": "Name of the creator. DEPRECATED due to GDPR"
          },
          "createdByType": {
            "type": "string",
            "description": "Type of the post's creator, eg.: feed, admin, sharer, etc."
          },
          "createdByAvatar": {
            "type": "string",
            "description": "Avatar of the post's creator. DEPRECATED due to GDPR"
          },
          "updatedBy": {
            "type": "string",
            "description": "Id of the last one who edited the post"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post was last edited"
          },
          "companyId": {
            "type": "string",
            "description": "Company where the post belongs to"
          },
          "order": {
            "type": "number",
            "description": "Order of the post. DEPRECATED"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be published"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be archived"
          },
          "tagList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "deprecated": true,
            "description": "List of tag. DEPRECATED"
          },
          "filteredChannelList": {
            "type": "array",
            "description": "Channels where the post belongs to, filtered by the caller's subscription. Only includes channels where it has been published",
            "items": {
              "$ref": "#/components/schemas/PostChannel"
            }
          },
          "fullChannelList": {
            "type": "array",
            "description": "Channels where the post belongs to, unfiltered",
            "items": {
              "$ref": "#/components/schemas/PostChannel"
            }
          },
          "userTagList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "deprecated": true,
            "description": "List of user tag. DEPRECATED"
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign Id of the post"
          },
          "campaignName": {
            "type": "string",
            "description": "Campaign name of the post"
          },
          "campaignColor": {
            "type": "string",
            "description": "Campaign color of the post"
          },
          "duplicated": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "duplicatedList": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "deprecated": true,
            "description": "DEPRECATED"
          },
          "proposeComment": {
            "type": "string",
            "description": "Comment of post's proposer"
          },
          "socnetSet": {
            "type": "object",
            "description": "List of socnet available, unordered. Empty for internal post",
            "properties": {
              "facebook": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "linkedin": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "twitter": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "xing": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "wechat": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "generic": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "instagram": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "viadeo": {
                "$ref": "#/components/schemas/PostSocnet"
              }
            }
          },
          "socnetList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of socnet available, ordered. Empty for internal post"
          },
          "commentEnabled": {
            "type": "boolean",
            "description": "whether comment is enabled for the post"
          },
          "commentCount": {
            "type": "number",
            "description": "number of comments of the post"
          },
          "commentList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "description": "Comment feed of the post"
          },
          "bookmarkId": {
            "type": "string",
            "description": "Id of the bookmark made by the caller"
          },
          "bookmarkedAt": {
            "type": "string",
            "description": "Time when the post was bookmarked"
          },
          "isPostInstantPushEnabled": {
            "type": "boolean",
            "description": "InstantPush setting of the post"
          },
          "reviewedBy": {
            "type": "string",
            "description": "For proposed post, Id of the reviewer"
          },
          "reviewedAt": {
            "type": "string",
            "description": "For proposed post, time when it was reviewed"
          },
          "reviewMessage": {
            "type": "string",
            "description": "For proposed post, message left by the reviewere, ONLY when the post is rejected."
          },
          "reviewedByDisplay": {
            "type": "string",
            "description": "For proposed post, Id of the reviewer. DEPRECATED due to GDPR"
          },
          "uniqueReadCount": {
            "type": "number",
            "description": "number of unique reads of the post"
          },
          "shareCount": {
            "type": "number",
            "description": "number of shares made from the post"
          },
          "clickCount": {
            "type": "number",
            "description": "number of clicks generated by shares from the post"
          },
          "feedbackList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostFeedback"
            },
            "description": "Feedback feed of the post"
          },
          "likeCount": {
            "type": "number",
            "description": "Number of users who liked this post"
          },
          "isLiked": {
            "type": "boolean",
            "description": "True if the user of the current session liked the post"
          },
          "lang": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of post's languages"
          },
          "type": {
            "type": "string",
            "description": "Type of a post",
            "enum": [
              "article",
              "link",
              "image",
              "video"
            ]
          },
          "isReadConfirmationRequired": {
            "type": "boolean",
            "description": "True if the users should be requested to confirm reading the post"
          },
          "isReadConfirmationAnswered": {
            "type": "boolean",
            "description": "True if the user has confirmed reading the post"
          },
          "readConfirmationCount": {
            "type": "number",
            "description": "Number of subscribers who have confirmed reading the post"
          },
          "readerCount": {
            "type": "number",
            "description": "Number of subscribers who have reader access to the post"
          }
        }
      },
      "PostSocnet": {
        "type": "object",
        "required": [
          "commentSet",
          "scheduledShareList",
          "sharePoint",
          "shareStatus",
          "viewCount"
        ],
        "properties": {
          "commentSet": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "suggested comments when share to this network"
          },
          "scheduledShareList": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of post's scheduled shares made by current session user"
          },
          "sharePoint": {
            "type": "number",
            "description": "points gained if share to this network"
          },
          "shareStatus": {
            "type": "string",
            "description": "Status whether user has shared/scheduled share the posts to this network or not",
            "enum": [
              "shared",
              "not shared",
              "scheduled"
            ]
          },
          "viewCount": {
            "type": "number",
            "description": "Clicks generated from shares made from this post to this network"
          }
        }
      },
      "PostChannel": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "groupName",
          "status"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of channel the post belongs to"
          },
          "name": {
            "type": "string",
            "description": "Name of channel"
          },
          "groupName": {
            "type": "string",
            "description": "Group name where this channel belongs to"
          },
          "isManager": {
            "type": "boolean",
            "description": "If current session user has management right to publish post for this channel"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "If this channel is private. A user who aren't subscribed to a private channel won't be able to see it"
          },
          "status": {
            "type": "string",
            "enum": [
              "proposed",
              "published",
              "archived",
              "scheduled",
              "approved",
              "rejected"
            ],
            "description": "Publish status of the post in this channel. Approved and rejected are used only in frontend"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be published"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be archived"
          }
        }
      },
      "PostLike": {
        "type": "object",
        "required": [
          "likeCount",
          "likerList"
        ],
        "properties": {
          "likeCount": {
            "type": "number",
            "description": "Total number of people who like a post"
          },
          "likerList": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "name",
                "avatar"
              ],
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "avatar": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PostFeedback": {
        "type": "object",
        "required": [
          "addedAt",
          "addedBy",
          "avatarUrl",
          "firstName",
          "lastName",
          "message",
          "role",
          "_id"
        ],
        "properties": {
          "addedAt": {
            "type": "string",
            "format": "date-time"
          },
          "addedBy": {
            "type": "string",
            "description": "Id of author of the feedback"
          },
          "avatarUrl": {
            "type": "string",
            "description": "avatar of the author"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "description": "feedback message from admin to the post creator"
          },
          "role": {
            "type": "string",
            "description": "role of the author"
          },
          "_id": {
            "type": "string",
            "description": "Id of the feedback"
          }
        }
      },
      "PostEdit": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "body",
          "htmlBody",
          "url",
          "imageUrlList",
          "publishedAt",
          "archivedAt",
          "fullChannelList",
          "campaignId",
          "campaignName",
          "campaignColor",
          "socnetSet",
          "commentEnabled",
          "isPostInstantPushEnabled",
          "lang",
          "type",
          "proposeComment"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the post"
          },
          "title": {
            "type": "string",
            "description": "Title of the post"
          },
          "videoUrl": {
            "type": "string",
            "description": "Video Url of the post. Note has empty string as url"
          },
          "body": {
            "type": "string",
            "description": "Body of the post."
          },
          "htmlBody": {
            "type": "string",
            "description": "Rich text body of the post."
          },
          "url": {
            "type": "string",
            "description": "Url of the post."
          },
          "imageUrlList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of a post's image url"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be published"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be archived"
          },
          "fullChannelList": {
            "type": "array",
            "description": "Channels where the post belongs to, unfiltered",
            "items": {
              "$ref": "#/components/schemas/PostChannel"
            }
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign Id of the post"
          },
          "campaignName": {
            "type": "string",
            "description": "Campaign name of the post"
          },
          "campaignColor": {
            "type": "string",
            "description": "Campaign color of the post"
          },
          "socnetSet": {
            "type": "object",
            "description": "List of socnet available, unordered. Empty for internal post",
            "properties": {
              "facebook": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "linkedin": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "twitter": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "xing": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "wechat": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "generic": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "instagram": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "viadeo": {
                "$ref": "#/components/schemas/PostSocnet"
              }
            }
          },
          "commentEnabled": {
            "type": "boolean",
            "description": "whether comment is enabled for the post"
          },
          "isPostInstantPushEnabled": {
            "type": "boolean",
            "description": "InstantPush setting of the post"
          },
          "proposeComment": {
            "type": "string",
            "description": "Comment of post's proposer"
          },
          "lang": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "List of post's languages"
          },
          "type": {
            "type": "string",
            "description": "Type of a post",
            "enum": [
              "article",
              "link",
              "image",
              "video"
            ]
          },
          "isReadConfirmationRequired": {
            "type": "boolean",
            "description": "True if the users should be requested to confirm reading the post"
          }
        }
      },
      "PostCreate": {
        "type": "object",
        "required": [
          "fullChannelList"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the post"
          },
          "body": {
            "type": "string",
            "description": "Body of the post."
          },
          "htmlBody": {
            "type": "string",
            "description": "Rich text body of the post."
          },
          "url": {
            "type": "string",
            "description": "Url of the post."
          },
          "imageUrlList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of a post's image url"
          },
          "publishedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be published"
          },
          "archivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the post will be archived"
          },
          "fullChannelList": {
            "type": "array",
            "description": "Channels where the post belongs to, unfiltered",
            "items": {
              "$ref": "#/components/schemas/PostChannel"
            }
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign Id of the post"
          },
          "campaignName": {
            "type": "string",
            "description": "Campaign name of the post"
          },
          "campaignColor": {
            "type": "string",
            "description": "Campaign color of the post"
          },
          "socnetSet": {
            "type": "object",
            "description": "List of socnet available, unordered. Empty for internal post",
            "properties": {
              "facebook": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "linkedin": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "twitter": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "xing": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "wechat": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "generic": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "instagram": {
                "$ref": "#/components/schemas/PostSocnet"
              },
              "viadeo": {
                "$ref": "#/components/schemas/PostSocnet"
              }
            }
          },
          "commentEnabled": {
            "type": "boolean",
            "description": "whether comment is enabled for the post"
          },
          "isPostInstantPushEnabled": {
            "type": "boolean",
            "description": "InstantPush setting of the post"
          },
          "proposeComment": {
            "type": "string",
            "description": "Comment of post's proposer"
          },
          "lang": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of post's languages code"
          },
          "type": {
            "type": "string",
            "description": "Type of a post",
            "enum": [
              "article",
              "link",
              "image",
              "video"
            ]
          },
          "isReadConfirmationRequired": {
            "type": "boolean",
            "description": "True if the users should be requested to confirm reading the post"
          }
        }
      },
      "PostCreateResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the post"
          },
          "type": {
            "type": "string",
            "description": "Type of a post",
            "enum": [
              "published",
              "incoming",
              "schedule"
            ]
          }
        }
      },
      "ShareCreateRequestPayload": {
        "type": "object",
        "required": [
          "postId",
          "media"
        ],
        "properties": {
          "postId": {
            "type": "string",
            "description": "Id of the post"
          },
          "media": {
            "type": "string",
            "enum": [
              "linkedin",
              "twitter",
              "facebook",
              "xing",
              "viadeo",
              "generic"
            ],
            "description": "Social media type"
          },
          "comment": {
            "type": "string",
            "description": "Comment to appear in social network post"
          },
          "scheduledAt": {
            "type": "string",
            "format": "date-time",
            "description": "Scheduled date for the post to be published"
          },
          "imageUrlList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "image url to be shared"
          }
        }
      },
      "ShareConfirmRequestPayload": {
        "type": "object",
        "required": [
          "id",
          "media"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the post"
          },
          "media": {
            "type": "string",
            "enum": [
              "facebook",
              "xing"
            ],
            "description": "Social media type"
          }
        }
      },
      "ModelSmartShareCreateParam": {
        "type": "object",
        "required": [
          "postId",
          "media",
          "timezone"
        ],
        "properties": {
          "postId": {
            "type": "string",
            "description": "Id of the post"
          },
          "comment": {
            "type": "string",
            "description": "Comment to appear in social network post"
          },
          "media": {
            "type": "string",
            "enum": [
              "linkedin",
              "twitter"
            ],
            "description": "Social media type"
          },
          "timezone": {
            "type": "string",
            "example": "Europe/Helsinki"
          },
          "imageUrlList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "image url to be shared"
          }
        }
      },
      "Group": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "createdAt",
          "memberCount",
          "seatLimit",
          "adminList"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId",
            "description": "Id of the group"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the group was created"
          },
          "memberCount": {
            "type": "number",
            "format": "int32",
            "description": "Number of seat taken (= how many members are in the group)"
          },
          "seatLimit": {
            "type": "number",
            "format": "int32",
            "description": "Max amount of seats allocated for the group"
          },
          "adminList": {
            "type": "array",
            "description": "List of group admin",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "firstName",
                "lastName",
                "email",
                "avatarUrl"
              ],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Id of the admin"
                },
                "firstName": {
                  "type": "string",
                  "description": "first name of the admin"
                },
                "lastName": {
                  "type": "string",
                  "description": "last name of the admin"
                },
                "email": {
                  "type": "string",
                  "description": "email of the admin"
                },
                "avatarUrl": {
                  "type": "string",
                  "description": "avatarUrl of the admin"
                }
              }
            }
          }
        }
      },
      "EditGroup": {
        "type": "object",
        "required": [
          "_id"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId",
            "description": "Id of the group"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "seatLimit": {
            "type": "number",
            "format": "int32",
            "description": "Max amount of seats allocated for the group"
          },
          "adminList": {
            "type": "array",
            "description": "List of group admin",
            "items": {
              "type": "object",
              "required": [
                "_id"
              ],
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Id of the admin"
                },
                "firstName": {
                  "type": "string",
                  "description": "first name of the admin"
                },
                "lastName": {
                  "type": "string",
                  "description": "last name of the admin"
                }
              }
            }
          }
        }
      },
      "NewGroup": {
        "type": "object",
        "required": [
          "seatLimit",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the group"
          },
          "seatLimit": {
            "type": "number",
            "format": "int32",
            "description": "Max amount of seats allocated for the group"
          }
        }
      },
      "SetDefaultChannels": {
        "type": "object",
        "required": [
          "companyId",
          "mandatoryChannelList",
          "recommendedChannelList"
        ],
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Id of the Company",
            "$ref": "#/components/schemas/ObjectId"
          },
          "mandatoryChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "recommendedChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        }
      },
      "GetDefaultChannels": {
        "type": "object",
        "required": [
          "mandatoryChannelList",
          "recommendedChannelList"
        ],
        "properties": {
          "mandatoryChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelReadPublic"
            }
          },
          "recommendedChannelList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelReadPublic"
            }
          }
        }
      },
      "GroupDigestSettings": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id of the group",
            "$ref": "#/components/schemas/ObjectId"
          },
          "subject": {
            "type": "string",
            "description": "Subject string of digest emails"
          },
          "greeting": {
            "type": "string",
            "description": "Greeting string of digest emails"
          },
          "message": {
            "type": "string",
            "description": "Message string of digest emails"
          },
          "emailCronEx": {
            "type": "string",
            "description": "Cronex specifying when emails are sent"
          }
        }
      },
      "SettingsGroup": {
        "type": "object",
        "required": [
          "_id",
          "name"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "GroupVisibilitySettingsResponse": {
        "type": "object",
        "properties": {
          "isAllGroupsAccessible": {
            "type": "boolean"
          },
          "accessibleGroups": {
            "type": "array",
            "items": {
              "description": "a limited version of Group object, representing accessible Groups",
              "$ref": "#/components/schemas/SettingsGroup"
            }
          },
          "inaccessibleGroups": {
            "type": "array",
            "items": {
              "description": "a limited version of Group object, representing inaccessible Groups",
              "$ref": "#/components/schemas/SettingsGroup"
            }
          }
        }
      },
      "GroupVisibilitySettingsRequest": {
        "type": "object",
        "properties": {
          "isAllGroupsAccessible": {
            "type": "boolean"
          },
          "accessibleGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        }
      },
      "Token": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DeleteToken": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "InvitationPermission": {
        "type": "object",
        "required": [
          "sharerInviteEnabled",
          "emailDomainList",
          "selfRegisterEnabled"
        ],
        "properties": {
          "sharerInviteEnabled": {
            "type": "boolean",
            "description": "Allow sharer to invite new sharer. Invitation must follow the emailDomainList"
          },
          "selfRegisterEnabled": {
            "type": "boolean",
            "description": "Allow self-registeration for a new sharer."
          },
          "emailDomainList": {
            "type": "array",
            "description": "Email domain allowed for self-registered or sharer invitation",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "example": [
              "smarp.com",
              "smarpsocial.com"
            ]
          }
        }
      },
      "InvitationEmailTemplate": {
        "type": "object",
        "required": [
          "invitationTemplate",
          "invitationSignature"
        ],
        "properties": {
          "invitationTemplate": {
            "type": "string",
            "description": "Email template for sending invitation."
          },
          "smsInvitationTemplate": {
            "type": "string",
            "description": "Sms template for sending invitation. The placeholder for user and invitation link is included in the form of [Smarp User] and [invitation link]\n"
          },
          "invitationSignature": {
            "type": "string",
            "description": "Signature of email template for sending invitation."
          }
        }
      },
      "GroupedChannel": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Id of group"
          },
          "groupName": {
            "type": "string",
            "description": "Name of group"
          },
          "channelList": {
            "type": "object",
            "description": "List of channels",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Id of channel"
              },
              "name": {
                "type": "string",
                "description": "Name of the channel"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Date when the channel was created"
              },
              "subscriberCount": {
                "type": "number",
                "format": "int32",
                "description": "Number of subscriber of the channel"
              },
              "subscriptionStatus": {
                "type": "boolean",
                "description": "Subscription status of the user in the channel"
              },
              "createdByDisplay": {
                "type": "string",
                "description": "Name of the channel creator",
                "deprecated": true
              },
              "managerList": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Id of the Channel Manager"
                    },
                    "firstName": {
                      "type": "string",
                      "description": "first name of the Channel Manager"
                    },
                    "lastName": {
                      "type": "string",
                      "description": "last name of the Channel Manager"
                    }
                  }
                }
              },
              "description": {
                "type": "string",
                "description": "Description of the channel"
              },
              "isActive": {
                "type": "boolean",
                "description": "Status of the channel"
              },
              "isMandatory": {
                "type": "boolean",
                "description": "Channel is mandatory for Company or teams where the user belongs to"
              },
              "isManager": {
                "type": "boolean",
                "description": "Check if channel is managed by current session user"
              },
              "groupId": {
                "type": "string",
                "description": "Id of group that channel belongs"
              },
              "groupName": {
                "type": "string",
                "description": "Name of group that channel belongs"
              }
            }
          }
        }
      },
      "PostShareTotalBasedOnChannelModel": {
        "type": "object",
        "required": [
          "channelName",
          "postTotal",
          "shareTotal",
          "clickTotal",
          "reactionTotal",
          "sharePerPost",
          "clickAndReactionPerShare"
        ],
        "properties": {
          "channelName": {
            "type": "string"
          },
          "postTotal": {
            "type": "number"
          },
          "shareTotal": {
            "type": "number"
          },
          "clickTotal": {
            "type": "number"
          },
          "reactionTotal": {
            "type": "number"
          },
          "sharePerPost": {
            "type": "number"
          },
          "clickAndReactionPerShare": {
            "type": "number"
          }
        }
      },
      "PostShareTotalBasedOnCampaignModel": {
        "type": "object",
        "required": [
          "campaigns",
          "postTotal",
          "shareTotal",
          "clickTotal",
          "reactionTotal",
          "sharePerPost",
          "clickAndReactionPerShare"
        ],
        "properties": {
          "campaigns": {
            "type": "string"
          },
          "postTotal": {
            "type": "number"
          },
          "shareTotal": {
            "type": "number"
          },
          "clickTotal": {
            "type": "number"
          },
          "reactionTotal": {
            "type": "number"
          },
          "sharePerPost": {
            "type": "number"
          },
          "clickAndReactionPerShare": {
            "type": "number"
          }
        }
      },
      "UserTeamActivityModel": {
        "type": "object",
        "required": [
          "userTeam",
          "userCount",
          "reach",
          "postsVisible",
          "shareCount",
          "clickCount",
          "reactionCount"
        ],
        "properties": {
          "userTeam": {
            "type": "string"
          },
          "userCount": {
            "type": "number"
          },
          "reach": {
            "type": "number"
          },
          "postsVisible": {
            "type": "number"
          },
          "shareCount": {
            "type": "number"
          },
          "clickCount": {
            "type": "number"
          },
          "reactionCount": {
            "type": "number"
          }
        }
      },
      "VideoStreamInList": {
        "type": "object",
        "required": [
          "month",
          "year",
          "gigabytes"
        ],
        "properties": {
          "month": {
            "type": "number"
          },
          "year": {
            "type": "number"
          },
          "gigabytes": {
            "type": "number"
          }
        }
      },
      "UserInList": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberVerified": {
            "type": "boolean"
          },
          "role": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "AvatarUrl": {
            "type": "string"
          },
          "point": {
            "type": "number",
            "description": "life-time point of the user"
          },
          "rewardPoint": {
            "type": "number",
            "description": "current point of the user"
          },
          "userTagList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "deprecated": true,
            "description": "List of user tag. DEPRECATED"
          },
          "categoryMap": {
            "type": "string",
            "deprecated": true,
            "description": "VERY OLD. SUPER DEPRECATED. List of user tag. It's not a string, just ignore it"
          },
          "EmailVerified": {
            "type": "boolean"
          },
          "RoleId": {
            "type": "string",
            "deprecated": true,
            "description": "Id for a role in Permission Model. DEPRECATED"
          },
          "RoleName": {
            "type": "string",
            "deprecated": true,
            "description": "Name of a role in Permission Model. DEPRECATED"
          },
          "RoleDescription": {
            "type": "string",
            "deprecated": true,
            "description": "Description of a role in Permission Model. DEPRECATED"
          },
          "socnetList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "socnet which user has been connected."
          },
          "lastActive": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the user last access Smarp"
          },
          "anonymousEnabled": {
            "type": "boolean"
          },
          "teamList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          }
        }
      },
      "UserGet": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberVerified": {
            "type": "boolean"
          },
          "jobPosition": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "isFresh": {
            "type": "boolean"
          },
          "point": {
            "type": "integer"
          },
          "rewardPoint": {
            "type": "integer"
          },
          "role": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "companySubdomain": {
            "type": "string"
          },
          "linkedinTokenExpiredAt": {
            "type": "string",
            "format": "date-time"
          },
          "AvatarUrl": {
            "type": "string"
          },
          "connectedHiddenAt": {
            "type": "string",
            "format": "date-time"
          },
          "hasPassword": {
            "type": "boolean"
          },
          "EmailVerified": {
            "type": "boolean"
          },
          "SawPoll": {
            "type": "boolean"
          },
          "SawPreview": {
            "type": "boolean"
          },
          "nextEmailAt": {
            "type": "string",
            "format": "date-time"
          },
          "referrerMessage": {
            "type": "string"
          },
          "pendingReward": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "rewardId": {
                  "type": "string"
                },
                "point": {
                  "type": "integer"
                }
              }
            }
          },
          "companyIdPartnerList": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "EmailCronEx": {
            "type": "string"
          },
          "Timezone": {
            "type": "string"
          },
          "socnetList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "language": {
            "type": "string"
          },
          "triggeredEventList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "teamList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "instantPost": {
            "type": "boolean"
          },
          "acceptedInvitation": {
            "type": "boolean"
          },
          "shareStat": {
            "type": "boolean"
          },
          "newProposedPost": {
            "type": "boolean"
          },
          "approvedPost": {
            "type": "boolean"
          },
          "rejectedPost": {
            "type": "boolean"
          },
          "internalCommenting": {
            "type": "boolean"
          },
          "ad_error_unexpected": {
            "type": "boolean"
          },
          "ad_error_empty_group": {
            "type": "boolean"
          },
          "ad_error_invalid_group": {
            "type": "boolean"
          },
          "ad_error_invalid_attribute": {
            "type": "boolean"
          },
          "ad_error_admin_not_in_group": {
            "type": "boolean"
          },
          "ad_error_user_exists": {
            "type": "boolean"
          },
          "isPostInstantPushEnabled": {
            "type": "boolean"
          },
          "smarpScore": {
            "type": "integer"
          },
          "lastActive": {
            "type": "string",
            "format": "date-time"
          },
          "smarpFeatureMap": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          },
          "anonymousEnabled": {
            "type": "boolean"
          },
          "managingChannelIdList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OnboardingEmailList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "isUserPointsEnabled": {
            "type": "boolean"
          }
        }
      },
      "UserEdit": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "anonymousEnabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "jobPosition": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "UserPreview": {
        "type": "object",
        "required": [
          "_id",
          "firstName",
          "lastName",
          "description",
          "email",
          "phoneNumber",
          "jobPosition",
          "department",
          "countryCode",
          "avatarUrl"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "jobPosition": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          }
        }
      },
      "UserMassSendMail": {
        "type": "object",
        "required": [
          "userIdList",
          "message",
          "senderName"
        ],
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "message": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              },
              "userType": {
                "type": "string",
                "enum": [
                  "employee",
                  "manager"
                ]
              },
              "action": {
                "type": "string",
                "enum": [
                  "Connected",
                  "Not connected",
                  "Shared",
                  "Not shared",
                  "unshared"
                ]
              },
              "lastActiveFilter": {
                "type": "string",
                "enum": [
                  "inte7",
                  "inte30",
                  "inte60",
                  "inte90",
                  "i7",
                  "i30",
                  "i60",
                  "i90"
                ]
              },
              "team": {
                "type": "string"
              },
              "GroupId": {
                "$ref": "#/components/schemas/ObjectId"
              }
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "MassActionResponseStruct": {
        "type": "object",
        "required": [
          "successCount",
          "failureList"
        ],
        "properties": {
          "successCount": {
            "type": "integer"
          },
          "failureList": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "email",
                "error"
              ],
              "properties": {
                "_id": {
                  "$ref": "#/components/schemas/ObjectId"
                },
                "email": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "LaunchUserResponseStruct": {
        "type": "object",
        "required": [
          "successCount",
          "phoneCount",
          "emailCount",
          "failureList"
        ],
        "properties": {
          "successCount": {
            "type": "integer"
          },
          "phoneCount": {
            "type": "integer"
          },
          "emailCount": {
            "type": "integer"
          },
          "failureList": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "email",
                "error"
              ],
              "properties": {
                "_id": {
                  "$ref": "#/components/schemas/ObjectId"
                },
                "email": {
                  "type": "string"
                },
                "error": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PutUserLaunchReminder": {
        "type": "object",
        "required": [
          "userIdList"
        ],
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              },
              "userType": {
                "type": "string",
                "enum": [
                  "employee",
                  "manager"
                ]
              },
              "status": {
                "type": "string"
              }
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "UserPutInvitationReminderParams": {
        "type": "object",
        "required": [
          "userIdList"
        ],
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              }
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "UserRegisterMassRemindParams": {
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              }
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "UserMassActionResponseStruct": {
        "type": "object",
        "properties": {
          "successCount": {
            "type": "integer"
          },
          "failureList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMassActionFailStruct"
            }
          }
        }
      },
      "UserMassActionFailStruct": {
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "email": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "UserLaunchInvitationMassSendParams": {
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "scheduledAt": {
            "type": "string"
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              },
              "userType": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "selectAll": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "UserMassModifyGroup": {
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "groupId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "filter": {
            "$ref": "#/components/schemas/MassActionFilter"
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "MassActionFilter": {
        "type": "object",
        "properties": {
          "searchTerm": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "lastActiveFilter": {
            "type": "string"
          },
          "userTag": {
            "type": "string"
          },
          "team": {
            "type": "string"
          },
          "GroupId": {
            "type": "string"
          }
        }
      },
      "UserModifyRoleParams": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "companyId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationStruct"
            }
          }
        }
      },
      "InvitationStruct": {
        "type": "object",
        "required": [
          "_id",
          "companyId",
          "role",
          "email",
          "phone",
          "firstName",
          "lastName",
          "referrerName",
          "userTagList",
          "EmailVerified",
          "teamList",
          "groupId"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "companyId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "role": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "referrerName": {
            "type": "string"
          },
          "remindedAt": {
            "type": "string"
          },
          "sentAt": {
            "type": "string"
          },
          "scheduledAt": {
            "type": "string"
          },
          "categoryMap": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "userTagList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "EmailVerified": {
            "type": "boolean"
          },
          "sentOk": {
            "type": "boolean"
          },
          "teamList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "$ref": "#/components/schemas/ObjectId"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "groupId": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      },
      "Invitee": {
        "type": "object",
        "required": [
          "email",
          "phone",
          "name",
          "teamIdList"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "teamIdList": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "$ref": "#/components/schemas/ObjectId"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "inviteeList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invitee"
            }
          },
          "message": {
            "type": "string"
          },
          "inviterName": {
            "type": "string"
          },
          "scheduledAt": {
            "format": "date-time"
          },
          "roleId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "sentOk": {
            "type": "boolean"
          },
          "groupId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "invitationSignature": {
            "type": "string"
          }
        }
      },
      "UserLaunchInvitationMassDestroyParams": {
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              },
              "userType": {
                "type": "string"
              },
              "status": {
                "type": "string"
              }
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "UserInvitationMassDestroyParams": {
        "type": "object",
        "properties": {
          "userIdList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          "filter": {
            "type": "object",
            "properties": {
              "searchTerm": {
                "type": "string"
              }
            }
          },
          "selectAll": {
            "type": "boolean"
          }
        }
      },
      "GetUserQueueResponse": {
        "type": "object",
        "properties": {
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueuedUser"
            }
          },
          "Count": {
            "type": "integer"
          }
        }
      },
      "QueuedUser": {
        "type": "object",
        "required": [
          "_id",
          "companyId",
          "email",
          "order",
          "groupId"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "addedAt": {
            "type": "string"
          },
          "userTagList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "companyId": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "order": {
            "type": "integer"
          },
          "referrerName": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "groupId": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      },
      "PostReadersResult": {
        "type": "array",
        "minItems": 0,
        "maxItems": 25,
        "uniqueItems": true,
        "items": {
          "type": "object",
          "required": [
            "id",
            "firstName",
            "lastName"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "avatarUrl": {
              "type": "string"
            }
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "required": [
          "_id",
          "firstName",
          "lastName",
          "avatarUrl"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "jobPosition": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          }
        }
      },
      "GetUserProfilesResponse": {
        "type": "array",
        "minItems": 0,
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/UserProfile"
        }
      },
      "Identity": {
        "type": "object",
        "properties": {
          "identityId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "addedAt": {
            "type": "string"
          },
          "addedBy": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "authorName": {
            "type": "string"
          },
          "authorAvatarUrl": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "htmlBody": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "page",
              "link"
            ],
            "default": "page"
          },
          "commentEnabled": {
            "type": "boolean"
          },
          "groupId": {
            "$ref": "#/components/schemas/ObjectId"
          }
        }
      },
      "ObjectId": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{24}$"
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid"
      },
      "access-token": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
